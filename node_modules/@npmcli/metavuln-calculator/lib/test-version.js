// called by the Advisory[_testVersion] method, and the test-versions worker
const semver = require('semver')
const semverOpt = { includePrerelease: true, loose: true }
const getDepSpec = require('./get-dep-spec.js')

module.exports = opts => {
  const {
    version,
    spec,
    vulnerableVersions,
    type,
    range,
    packument,
    dependency,
    source,
  } = opts

  const sv = String(version)
  if (vulnerableVersions.includes(sv))
    return true

  if (type === 'advisory') {
    // advisory, just test range
    return semver.satisfies(version, range, semverOpt)
  }

  // check the dependency of version on the vulnerable dep
  // if we got a version that's not in the packument, fall back on
  // the spec provided, if possible.
  const mani = packument.versions[version] || {
    dependencies: {
      [dependency]: spec,
    },
  }

  if (!spec)
    spec = getDepSpec(mani, dependency)

  // no dep, no vuln
  if (spec === null)
    return false

  // not a semver range, nothing we can hope to do about it
  if (!semver.validRange(spec, semverOpt))
    return true

  const bd = mani.bundleDependencies
  const bundled = bd && bd.includes(source.name)
  // XXX if bundled, then semver.intersects() means vulnerable
  // else, pick a manifest and see if it can't be avoided
  // try to pick a version of the dep that isn't vulnerable
  const avoid = source.range

  if (bundled) {
    return semver.intersects(spec, avoid, semverOpt)
  }

  return this[_source].testSpec(spec)
}
