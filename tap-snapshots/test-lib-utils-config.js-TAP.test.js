/* IMPORTANT
 * This snapshot file is auto-generated, but designed for humans.
 * It should be checked into source control and tracked carefully.
 * Re-generate by setting TAP_SNAPSHOT=1 and running tests.
 * Make sure to inspect the output below.  Do not ignore changes!
 */
'use strict'
exports[`test/lib/utils/config.js TAP no process.umask() method > must match snapshot 1`] = `
Object {
  "defaults": Object {
    "access": null,
    "all": false,
    "allow-same-version": false,
    "also": null,
    "always-auth": false,
    "audit": true,
    "audit-level": null,
    "auth-type": "legacy",
    "before": null,
    "bin-links": true,
    "browser": null,
    "ca": null,
    "cache": "~/npm-cache",
    "cache-lock-retries": 10,
    "cache-lock-stale": 60000,
    "cache-lock-wait": 10000,
    "cache-max": null,
    "cache-min": 10,
    "cafile": null,
    "call": "",
    "cert": null,
    "cidr": null,
    "color": true,
    "commit-hooks": true,
    "depth": 0,
    "description": true,
    "dev": false,
    "dry-run": false,
    "editor": "vim",
    "engine-strict": false,
    "fetch-retries": 2,
    "fetch-retry-factor": 10,
    "fetch-retry-maxtimeout": 60000,
    "fetch-retry-mintimeout": 10000,
    "force": false,
    "format-package-lock": true,
    "fund": true,
    "git": "git",
    "git-tag-version": true,
    "global": false,
    "global-style": false,
    "heading": "npm",
    "https-proxy": null,
    "if-present": false,
    "ignore-prepublish": false,
    "ignore-scripts": false,
    "include": Array [],
    "include-staged": false,
    "init-author-email": "",
    "init-author-name": "",
    "init-author-url": "",
    "init-license": "ISC",
    "init-module": "~/.npm-init.js",
    "init-version": "1.0.0",
    "json": false,
    "key": null,
    "legacy-bundling": false,
    "legacy-peer-deps": false,
    "link": false,
    "local-address": undefined,
    "loglevel": "notice",
    "logs-max": 10,
    "long": false,
    "maxsockets": 50,
    "message": "%s",
    "metrics-registry": null,
    "node-options": null,
    "node-version": "v14.8.0",
    "noproxy": null,
    "offline": false,
    "omit": Array [],
    "only": null,
    "optional": true,
    "otp": null,
    "package": Array [],
    "package-lock": true,
    "package-lock-only": false,
    "parseable": false,
    "prefer-offline": false,
    "prefer-online": false,
    "preid": "",
    "production": false,
    "progress": true,
    "proxy": null,
    "read-only": false,
    "rebuild-bundle": true,
    "registry": "https://registry.npmjs.org/",
    "rollback": true,
    "save": true,
    "save-bundle": false,
    "save-dev": false,
    "save-exact": false,
    "save-optional": false,
    "save-prefix": "^",
    "save-prod": false,
    "scope": "",
    "script-shell": null,
    "scripts-prepend-node-path": "warn-only",
    "searchexclude": null,
    "searchlimit": 20,
    "searchopts": "",
    "searchstaleness": 900,
    "send-metrics": false,
    "shell": "cmd.exe",
    "shrinkwrap": true,
    "sign-git-commit": false,
    "sign-git-tag": false,
    "sso-poll-frequency": 500,
    "sso-type": "oauth",
    "strict-ssl": true,
    "tag": "latest",
    "tag-version-prefix": "v",
    "timing": false,
    "tmp": "/tmp",
    "umask": 18,
    "unicode": true,
    "update-notifier": true,
    "usage": false,
    "user-agent": "npm/{npm-version} node/{node-version} {platform} {arch} {ci}",
    "userconfig": "~/.npmrc",
    "version": false,
    "versions": false,
    "viewer": "browser",
  },
  "shorthands": Object {
    "?": Array [
      "--usage",
    ],
    "a": Array [
      "--all",
    ],
    "B": Array [
      "--save-bundle",
    ],
    "c": Array [
      "--call",
    ],
    "C": Array [
      "--prefix",
    ],
    "d": Array [
      "--loglevel",
      "info",
    ],
    "D": Array [
      "--save-dev",
    ],
    "dd": Array [
      "--loglevel",
      "verbose",
    ],
    "ddd": Array [
      "--loglevel",
      "silly",
    ],
    "desc": Array [
      "--description",
    ],
    "E": Array [
      "--save-exact",
    ],
    "enjoy-by": Array [
      "--before",
    ],
    "f": Array [
      "--force",
    ],
    "g": Array [
      "--global",
    ],
    "h": Array [
      "--usage",
    ],
    "H": Array [
      "--usage",
    ],
    "help": Array [
      "--usage",
    ],
    "l": Array [
      "--long",
    ],
    "local": Array [
      "--no-global",
    ],
    "m": Array [
      "--message",
    ],
    "n": Array [
      "--no-yes",
    ],
    "N": Array [
      "--no-registry",
    ],
    "no-desc": Array [
      "--no-description",
    ],
    "no-reg": Array [
      "--no-registry",
    ],
    "noreg": Array [
      "--no-registry",
    ],
    "O": Array [
      "--save-optional",
    ],
    "p": Array [
      "--parseable",
    ],
    "P": Array [
      "--save-prod",
    ],
    "porcelain": Array [
      "--parseable",
    ],
    "q": Array [
      "--loglevel",
      "warn",
    ],
    "quiet": Array [
      "--loglevel",
      "warn",
    ],
    "readonly": Array [
      "--read-only",
    ],
    "reg": Array [
      "--registry",
    ],
    "s": Array [
      "--loglevel",
      "silent",
    ],
    "S": Array [
      "--save",
    ],
    "silent": Array [
      "--loglevel",
      "silent",
    ],
    "v": Array [
      "--version",
    ],
    "verbose": Array [
      "--loglevel",
      "verbose",
    ],
    "y": Array [
      "--yes",
    ],
  },
  "types": Object {
    "access": Array [
      null,
      "restricted",
      "public",
    ],
    "all": Function Boolean(),
    "allow-same-version": Function Boolean(),
    "also": Array [
      null,
      "dev",
      "development",
    ],
    "always-auth": Function Boolean(),
    "audit": Function Boolean(),
    "audit-level": Array [
      "low",
      "moderate",
      "high",
      "critical",
      "none",
      null,
    ],
    "auth-type": Array [
      "legacy",
      "sso",
      "saml",
      "oauth",
    ],
    "before": Array [
      null,
      Function Date(),
    ],
    "bin-links": Function Boolean(),
    "browser": Array [
      null,
      Function Boolean(),
      Function String(),
    ],
    "ca": Array [
      null,
      Function String(),
      Function Array(),
    ],
    "cache": &ref_1 Object {
      "_makeLong": Function toNamespacedPath(path),
      "basename": Function basename(path, ext),
      "delimiter": ":",
      "dirname": Function dirname(path),
      "extname": Function extname(path),
      "format": Function bound _format(),
      "isAbsolute": Function isAbsolute(path),
      "join": Function join(...args),
      "normalize": Function normalize(path),
      "parse": Function parse(path),
      "posix": <*ref_1>,
      "relative": Function relative(from, to),
      "resolve": Function resolve(...args),
      "sep": "/",
      "toNamespacedPath": Function toNamespacedPath(path),
      "win32": &ref_2 Object {
        "_makeLong": Function toNamespacedPath(path),
        "basename": Function basename(path, ext),
        "delimiter": ";",
        "dirname": Function dirname(path),
        "extname": Function extname(path),
        "format": Function bound _format(),
        "isAbsolute": Function isAbsolute(path),
        "join": Function join(...args),
        "normalize": Function normalize(path),
        "parse": Function parse(path),
        "posix": <*ref_1>,
        "relative": Function relative(from, to),
        "resolve": Function resolve(...args),
        "sep": "\\\\",
        "toNamespacedPath": Function toNamespacedPath(path),
        "win32": <*ref_2>,
      },
    },
    "cache-lock-retries": Function Number(),
    "cache-lock-stale": Function Number(),
    "cache-lock-wait": Function Number(),
    "cache-max": Function Number(),
    "cache-min": Function Number(),
    "cafile": &ref_1 Object {
      "_makeLong": Function toNamespacedPath(path),
      "basename": Function basename(path, ext),
      "delimiter": ":",
      "dirname": Function dirname(path),
      "extname": Function extname(path),
      "format": Function bound _format(),
      "isAbsolute": Function isAbsolute(path),
      "join": Function join(...args),
      "normalize": Function normalize(path),
      "parse": Function parse(path),
      "posix": <*ref_1>,
      "relative": Function relative(from, to),
      "resolve": Function resolve(...args),
      "sep": "/",
      "toNamespacedPath": Function toNamespacedPath(path),
      "win32": &ref_2 Object {
        "_makeLong": Function toNamespacedPath(path),
        "basename": Function basename(path, ext),
        "delimiter": ";",
        "dirname": Function dirname(path),
        "extname": Function extname(path),
        "format": Function bound _format(),
        "isAbsolute": Function isAbsolute(path),
        "join": Function join(...args),
        "normalize": Function normalize(path),
        "parse": Function parse(path),
        "posix": <*ref_1>,
        "relative": Function relative(from, to),
        "resolve": Function resolve(...args),
        "sep": "\\\\",
        "toNamespacedPath": Function toNamespacedPath(path),
        "win32": <*ref_2>,
      },
    },
    "call": Function String(),
    "cert": Array [
      null,
      Function String(),
    ],
    "cidr": Array [
      null,
      Function String(),
      Function Array(),
    ],
    "color": Array [
      "always",
      Function Boolean(),
    ],
    "commit-hooks": Function Boolean(),
    "depth": Function Number(),
    "description": Function Boolean(),
    "dev": Function Boolean(),
    "dry-run": Function Boolean(),
    "editor": Function String(),
    "engine-strict": Function Boolean(),
    "fetch-retries": Function Number(),
    "fetch-retry-factor": Function Number(),
    "fetch-retry-maxtimeout": Function Number(),
    "fetch-retry-mintimeout": Function Number(),
    "force": Function Boolean(),
    "format-package-lock": Function Boolean(),
    "fund": Function Boolean(),
    "git": Function String(),
    "git-tag-version": Function Boolean(),
    "global": Function Boolean(),
    "global-style": Function Boolean(),
    "globalconfig": &ref_1 Object {
      "_makeLong": Function toNamespacedPath(path),
      "basename": Function basename(path, ext),
      "delimiter": ":",
      "dirname": Function dirname(path),
      "extname": Function extname(path),
      "format": Function bound _format(),
      "isAbsolute": Function isAbsolute(path),
      "join": Function join(...args),
      "normalize": Function normalize(path),
      "parse": Function parse(path),
      "posix": <*ref_1>,
      "relative": Function relative(from, to),
      "resolve": Function resolve(...args),
      "sep": "/",
      "toNamespacedPath": Function toNamespacedPath(path),
      "win32": &ref_2 Object {
        "_makeLong": Function toNamespacedPath(path),
        "basename": Function basename(path, ext),
        "delimiter": ";",
        "dirname": Function dirname(path),
        "extname": Function extname(path),
        "format": Function bound _format(),
        "isAbsolute": Function isAbsolute(path),
        "join": Function join(...args),
        "normalize": Function normalize(path),
        "parse": Function parse(path),
        "posix": <*ref_1>,
        "relative": Function relative(from, to),
        "resolve": Function resolve(...args),
        "sep": "\\\\",
        "toNamespacedPath": Function toNamespacedPath(path),
        "win32": <*ref_2>,
      },
    },
    "group": Array [
      Function Number(),
      Function String(),
    ],
    "ham-it-up": Function Boolean(),
    "heading": Function String(),
    "https-proxy": Array [
      null,
      Object {
        "domainToASCII": Function domainToASCII(domain),
        "domainToUnicode": Function domainToUnicode(domain),
        "fileURLToPath": Function fileURLToPath(path),
        "format": Function urlFormat(urlObject, options),
        "parse": Function urlParse(url, parseQueryString, slashesDenoteHost),
        "pathToFileURL": Function pathToFileURL(filepath),
        "resolve": Function urlResolve(source, relative),
        "resolveObject": Function urlResolveObject(source, relative),
        "Url": Function Url(),
        "URL": Function URL(classURL),
        "URLSearchParams": Function URLSearchParams(classURLSearchParams),
      },
    ],
    "if-present": Function Boolean(),
    "ignore-prepublish": Function Boolean(),
    "ignore-scripts": Function Boolean(),
    "include": Array [
      Function Array(),
      "prod",
      "dev",
      "optional",
      "peer",
    ],
    "include-staged": Function Boolean(),
    "init-author-email": Function String(),
    "init-author-name": Function String(),
    "init-author-url": Array [
      "",
      Object {
        "domainToASCII": Function domainToASCII(domain),
        "domainToUnicode": Function domainToUnicode(domain),
        "fileURLToPath": Function fileURLToPath(path),
        "format": Function urlFormat(urlObject, options),
        "parse": Function urlParse(url, parseQueryString, slashesDenoteHost),
        "pathToFileURL": Function pathToFileURL(filepath),
        "resolve": Function urlResolve(source, relative),
        "resolveObject": Function urlResolveObject(source, relative),
        "Url": Function Url(),
        "URL": Function URL(classURL),
        "URLSearchParams": Function URLSearchParams(classURLSearchParams),
      },
    ],
    "init-license": Function String(),
    "init-module": &ref_1 Object {
      "_makeLong": Function toNamespacedPath(path),
      "basename": Function basename(path, ext),
      "delimiter": ":",
      "dirname": Function dirname(path),
      "extname": Function extname(path),
      "format": Function bound _format(),
      "isAbsolute": Function isAbsolute(path),
      "join": Function join(...args),
      "normalize": Function normalize(path),
      "parse": Function parse(path),
      "posix": <*ref_1>,
      "relative": Function relative(from, to),
      "resolve": Function resolve(...args),
      "sep": "/",
      "toNamespacedPath": Function toNamespacedPath(path),
      "win32": &ref_2 Object {
        "_makeLong": Function toNamespacedPath(path),
        "basename": Function basename(path, ext),
        "delimiter": ";",
        "dirname": Function dirname(path),
        "extname": Function extname(path),
        "format": Function bound _format(),
        "isAbsolute": Function isAbsolute(path),
        "join": Function join(...args),
        "normalize": Function normalize(path),
        "parse": Function parse(path),
        "posix": <*ref_1>,
        "relative": Function relative(from, to),
        "resolve": Function resolve(...args),
        "sep": "\\\\",
        "toNamespacedPath": Function toNamespacedPath(path),
        "win32": <*ref_2>,
      },
    },
    "init-version": Object {
      "clean": Function clean(version, options),
      "cmp": Function cmp(a, op, b, loose),
      "coerce": Function coerce(version, options),
      "Comparator": Function Comparator(classComparator),
      "compare": Function compare(a, b, loose),
      "compareBuild": Function compareBuild(a, b, loose),
      "compareIdentifiers": Function compareIdentifiers(a, b),
      "compareLoose": Function compareLoose(a, b),
      "diff": Function diff(version1, version2),
      "eq": Function eq(a, b, loose),
      "gt": Function gt(a, b, loose),
      "gte": Function gte(a, b, loose),
      "gtr": Function gtr(version, range, options),
      "inc": Function inc(version, release, options, identifier),
      "intersects": Function intersects(r1, r2, options),
      "lt": Function lt(a, b, loose),
      "lte": Function lte(a, b, loose),
      "ltr": Function ltr(version, range, options),
      "major": Function major(a, loose),
      "maxSatisfying": Function maxSatisfying(versions, range, options),
      "minor": Function minor(a, loose),
      "minSatisfying": Function minSatisfying(versions, range, options),
      "minVersion": Function minVersion(range, loose),
      "neq": Function neq(a, b, loose),
      "outside": Function outside(version, range, hilo, options),
      "parse": Function parse(version, options),
      "patch": Function patch(a, loose),
      "prerelease": Function prerelease(version, options),
      "Range": Function Range(classRange),
      "rcompare": Function rcompare(a, b, loose),
      "rcompareIdentifiers": Function rcompareIdentifiers(a, b),
      "re": Array [
        /0|[1-9]\\d*/,
        /[0-9]+/,
        /\\d*[a-zA-Z-][a-zA-Z0-9-]*/,
        /(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)/,
        /([0-9]+)\\.([0-9]+)\\.([0-9]+)/,
        /(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)/,
        /(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)/,
        /(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))/,
        /(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))/,
        /[0-9A-Za-z-]+/,
        /(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))/,
        /v?(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?/,
        /^v?(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?$/,
        /[v=\\s]*([0-9]+)\\.([0-9]+)\\.([0-9]+)(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?/,
        /^[v=\\s]*([0-9]+)\\.([0-9]+)\\.([0-9]+)(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?$/,
        /((?:<|>)?=?)/,
        /[0-9]+|x|X|\\*/,
        /0|[1-9]\\d*|x|X|\\*/,
        /[v=\\s]*(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?/,
        /[v=\\s]*([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?/,
        /^((?:<|>)?=?)\\s*[v=\\s]*(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?$/,
        /^((?:<|>)?=?)\\s*[v=\\s]*([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?$/,
        /(^|[^\\d])(\\d{1,16})(?:\\.(\\d{1,16}))?(?:\\.(\\d{1,16}))?(?:$|[^\\d])/,
        /(^|[^\\d])(\\d{1,16})(?:\\.(\\d{1,16}))?(?:\\.(\\d{1,16}))?(?:$|[^\\d])/g,
        /(?:~>?)/,
        /(\\s*)(?:~>?)\\s+/g,
        /^(?:~>?)[v=\\s]*(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?$/,
        /^(?:~>?)[v=\\s]*([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?$/,
        /(?:\\^)/,
        /(\\s*)(?:\\^)\\s+/g,
        /^(?:\\^)[v=\\s]*(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?$/,
        /^(?:\\^)[v=\\s]*([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?$/,
        /^((?:<|>)?=?)\\s*([v=\\s]*([0-9]+)\\.([0-9]+)\\.([0-9]+)(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)$|^$/,
        /^((?:<|>)?=?)\\s*(v?(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)$|^$/,
        /(\\s*)((?:<|>)?=?)\\s*([v=\\s]*([0-9]+)\\.([0-9]+)\\.([0-9]+)(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?|[v=\\s]*(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?)/g,
        /^\\s*([v=\\s]*(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?)\\s+-\\s+([v=\\s]*(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?)\\s*$/,
        /^\\s*([v=\\s]*([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?)\\s+-\\s+([v=\\s]*([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?)\\s*$/,
        /(<|>)?=?\\s*\\*/,
        /^\\s*>=\\s*0.0.0\\s*$/,
        /^\\s*>=\\s*0.0.0-0\\s*$/,
      ],
      "rsort": Function rsort(list, loose),
      "satisfies": Function satisfies(version, range, options),
      "SemVer": Function SemVer(classSemVer),
      "SEMVER_SPEC_VERSION": "2.0.0",
      "simplifyRange": Function (versions, range, options),
      "sort": Function sort(list, loose),
      "src": Array [
        "0|[1-9]\\\\d*",
        "[0-9]+",
        "\\\\d*[a-zA-Z-][a-zA-Z0-9-]*",
        "(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)",
        "([0-9]+)\\\\.([0-9]+)\\\\.([0-9]+)",
        "(?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)",
        "(?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)",
        "(?:-((?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))",
        "(?:-?((?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))",
        "[0-9A-Za-z-]+",
        "(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))",
        "v?(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)(?:-((?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?",
        "^v?(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)(?:-((?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?$",
        "[v=\\\\s]*([0-9]+)\\\\.([0-9]+)\\\\.([0-9]+)(?:-?((?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?",
        "^[v=\\\\s]*([0-9]+)\\\\.([0-9]+)\\\\.([0-9]+)(?:-?((?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?$",
        "((?:<|>)?=?)",
        "[0-9]+|x|X|\\\\*",
        "0|[1-9]\\\\d*|x|X|\\\\*",
        "[v=\\\\s]*(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:(?:-((?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)?)?",
        "[v=\\\\s]*([0-9]+|x|X|\\\\*)(?:\\\\.([0-9]+|x|X|\\\\*)(?:\\\\.([0-9]+|x|X|\\\\*)(?:(?:-?((?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)?)?",
        "^((?:<|>)?=?)\\\\s*[v=\\\\s]*(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:(?:-((?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)?)?$",
        "^((?:<|>)?=?)\\\\s*[v=\\\\s]*([0-9]+|x|X|\\\\*)(?:\\\\.([0-9]+|x|X|\\\\*)(?:\\\\.([0-9]+|x|X|\\\\*)(?:(?:-?((?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)?)?$",
        "(^|[^\\\\d])(\\\\d{1,16})(?:\\\\.(\\\\d{1,16}))?(?:\\\\.(\\\\d{1,16}))?(?:$|[^\\\\d])",
        "(^|[^\\\\d])(\\\\d{1,16})(?:\\\\.(\\\\d{1,16}))?(?:\\\\.(\\\\d{1,16}))?(?:$|[^\\\\d])",
        "(?:~>?)",
        "(\\\\s*)(?:~>?)\\\\s+",
        "^(?:~>?)[v=\\\\s]*(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:(?:-((?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)?)?$",
        "^(?:~>?)[v=\\\\s]*([0-9]+|x|X|\\\\*)(?:\\\\.([0-9]+|x|X|\\\\*)(?:\\\\.([0-9]+|x|X|\\\\*)(?:(?:-?((?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)?)?$",
        "(?:\\\\^)",
        "(\\\\s*)(?:\\\\^)\\\\s+",
        "^(?:\\\\^)[v=\\\\s]*(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:(?:-((?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)?)?$",
        "^(?:\\\\^)[v=\\\\s]*([0-9]+|x|X|\\\\*)(?:\\\\.([0-9]+|x|X|\\\\*)(?:\\\\.([0-9]+|x|X|\\\\*)(?:(?:-?((?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)?)?$",
        "^((?:<|>)?=?)\\\\s*([v=\\\\s]*([0-9]+)\\\\.([0-9]+)\\\\.([0-9]+)(?:-?((?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)$|^$",
        "^((?:<|>)?=?)\\\\s*(v?(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)(?:-((?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)$|^$",
        "(\\\\s*)((?:<|>)?=?)\\\\s*([v=\\\\s]*([0-9]+)\\\\.([0-9]+)\\\\.([0-9]+)(?:-?((?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?|[v=\\\\s]*(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:(?:-((?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)?)?)",
        "^\\\\s*([v=\\\\s]*(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:(?:-((?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)?)?)\\\\s+-\\\\s+([v=\\\\s]*(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:(?:-((?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)?)?)\\\\s*$",
        "^\\\\s*([v=\\\\s]*([0-9]+|x|X|\\\\*)(?:\\\\.([0-9]+|x|X|\\\\*)(?:\\\\.([0-9]+|x|X|\\\\*)(?:(?:-?((?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)?)?)\\\\s+-\\\\s+([v=\\\\s]*([0-9]+|x|X|\\\\*)(?:\\\\.([0-9]+|x|X|\\\\*)(?:\\\\.([0-9]+|x|X|\\\\*)(?:(?:-?((?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)?)?)\\\\s*$",
        "(<|>)?=?\\\\s*\\\\*",
        "^\\\\s*>=\\\\s*0.0.0\\\\s*$",
        "^\\\\s*>=\\\\s*0.0.0-0\\\\s*$",
      ],
      "subset": Function subset(sub, dom, options),
      "toComparators": Function toComparators(range, options),
      "tokens": Object {
        "BUILD": 10,
        "BUILDIDENTIFIER": 9,
        "CARET": 30,
        "CARETLOOSE": 31,
        "CARETTRIM": 29,
        "COERCE": 22,
        "COERCERTL": 23,
        "COMPARATOR": 33,
        "COMPARATORLOOSE": 32,
        "COMPARATORTRIM": 34,
        "FULL": 12,
        "FULLPLAIN": 11,
        "GTE0": 38,
        "GTE0PRE": 39,
        "GTLT": 15,
        "HYPHENRANGE": 35,
        "HYPHENRANGELOOSE": 36,
        "LONECARET": 28,
        "LONETILDE": 24,
        "LOOSE": 14,
        "LOOSEPLAIN": 13,
        "MAINVERSION": 3,
        "MAINVERSIONLOOSE": 4,
        "NONNUMERICIDENTIFIER": 2,
        "NUMERICIDENTIFIER": 0,
        "NUMERICIDENTIFIERLOOSE": 1,
        "PRERELEASE": 7,
        "PRERELEASEIDENTIFIER": 5,
        "PRERELEASEIDENTIFIERLOOSE": 6,
        "PRERELEASELOOSE": 8,
        "STAR": 37,
        "TILDE": 26,
        "TILDELOOSE": 27,
        "TILDETRIM": 25,
        "XRANGE": 20,
        "XRANGEIDENTIFIER": 17,
        "XRANGEIDENTIFIERLOOSE": 16,
        "XRANGELOOSE": 21,
        "XRANGEPLAIN": 18,
        "XRANGEPLAINLOOSE": 19,
      },
      "valid": Function valid(version, options),
      "validRange": Function validRange(range, options),
    },
    "json": Function Boolean(),
    "key": Array [
      null,
      Function String(),
    ],
    "legacy-bundling": Function Boolean(),
    "legacy-peer-deps": Function Boolean(),
    "link": Function Boolean(),
    "local-address": Array [
      undefined,
    ],
    "loglevel": Array [
      "silent",
      "error",
      "warn",
      "notice",
      "http",
      "timing",
      "info",
      "verbose",
      "silly",
    ],
    "logs-max": Function Number(),
    "long": Function Boolean(),
    "maxsockets": Function Number(),
    "message": Function String(),
    "metrics-registry": Array [
      null,
      Function String(),
    ],
    "node-options": Array [
      null,
      Function String(),
    ],
    "node-version": Array [
      null,
      Object {
        "clean": Function clean(version, options),
        "cmp": Function cmp(a, op, b, loose),
        "coerce": Function coerce(version, options),
        "Comparator": Function Comparator(classComparator),
        "compare": Function compare(a, b, loose),
        "compareBuild": Function compareBuild(a, b, loose),
        "compareIdentifiers": Function compareIdentifiers(a, b),
        "compareLoose": Function compareLoose(a, b),
        "diff": Function diff(version1, version2),
        "eq": Function eq(a, b, loose),
        "gt": Function gt(a, b, loose),
        "gte": Function gte(a, b, loose),
        "gtr": Function gtr(version, range, options),
        "inc": Function inc(version, release, options, identifier),
        "intersects": Function intersects(r1, r2, options),
        "lt": Function lt(a, b, loose),
        "lte": Function lte(a, b, loose),
        "ltr": Function ltr(version, range, options),
        "major": Function major(a, loose),
        "maxSatisfying": Function maxSatisfying(versions, range, options),
        "minor": Function minor(a, loose),
        "minSatisfying": Function minSatisfying(versions, range, options),
        "minVersion": Function minVersion(range, loose),
        "neq": Function neq(a, b, loose),
        "outside": Function outside(version, range, hilo, options),
        "parse": Function parse(version, options),
        "patch": Function patch(a, loose),
        "prerelease": Function prerelease(version, options),
        "Range": Function Range(classRange),
        "rcompare": Function rcompare(a, b, loose),
        "rcompareIdentifiers": Function rcompareIdentifiers(a, b),
        "re": Array [
          /0|[1-9]\\d*/,
          /[0-9]+/,
          /\\d*[a-zA-Z-][a-zA-Z0-9-]*/,
          /(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)/,
          /([0-9]+)\\.([0-9]+)\\.([0-9]+)/,
          /(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)/,
          /(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)/,
          /(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))/,
          /(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))/,
          /[0-9A-Za-z-]+/,
          /(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))/,
          /v?(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?/,
          /^v?(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?$/,
          /[v=\\s]*([0-9]+)\\.([0-9]+)\\.([0-9]+)(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?/,
          /^[v=\\s]*([0-9]+)\\.([0-9]+)\\.([0-9]+)(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?$/,
          /((?:<|>)?=?)/,
          /[0-9]+|x|X|\\*/,
          /0|[1-9]\\d*|x|X|\\*/,
          /[v=\\s]*(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?/,
          /[v=\\s]*([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?/,
          /^((?:<|>)?=?)\\s*[v=\\s]*(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?$/,
          /^((?:<|>)?=?)\\s*[v=\\s]*([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?$/,
          /(^|[^\\d])(\\d{1,16})(?:\\.(\\d{1,16}))?(?:\\.(\\d{1,16}))?(?:$|[^\\d])/,
          /(^|[^\\d])(\\d{1,16})(?:\\.(\\d{1,16}))?(?:\\.(\\d{1,16}))?(?:$|[^\\d])/g,
          /(?:~>?)/,
          /(\\s*)(?:~>?)\\s+/g,
          /^(?:~>?)[v=\\s]*(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?$/,
          /^(?:~>?)[v=\\s]*([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?$/,
          /(?:\\^)/,
          /(\\s*)(?:\\^)\\s+/g,
          /^(?:\\^)[v=\\s]*(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?$/,
          /^(?:\\^)[v=\\s]*([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?$/,
          /^((?:<|>)?=?)\\s*([v=\\s]*([0-9]+)\\.([0-9]+)\\.([0-9]+)(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)$|^$/,
          /^((?:<|>)?=?)\\s*(v?(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)$|^$/,
          /(\\s*)((?:<|>)?=?)\\s*([v=\\s]*([0-9]+)\\.([0-9]+)\\.([0-9]+)(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?|[v=\\s]*(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?)/g,
          /^\\s*([v=\\s]*(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?)\\s+-\\s+([v=\\s]*(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?)\\s*$/,
          /^\\s*([v=\\s]*([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?)\\s+-\\s+([v=\\s]*([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?)\\s*$/,
          /(<|>)?=?\\s*\\*/,
          /^\\s*>=\\s*0.0.0\\s*$/,
          /^\\s*>=\\s*0.0.0-0\\s*$/,
        ],
        "rsort": Function rsort(list, loose),
        "satisfies": Function satisfies(version, range, options),
        "SemVer": Function SemVer(classSemVer),
        "SEMVER_SPEC_VERSION": "2.0.0",
        "simplifyRange": Function (versions, range, options),
        "sort": Function sort(list, loose),
        "src": Array [
          "0|[1-9]\\\\d*",
          "[0-9]+",
          "\\\\d*[a-zA-Z-][a-zA-Z0-9-]*",
          "(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)",
          "([0-9]+)\\\\.([0-9]+)\\\\.([0-9]+)",
          "(?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)",
          "(?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)",
          "(?:-((?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))",
          "(?:-?((?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))",
          "[0-9A-Za-z-]+",
          "(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))",
          "v?(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)(?:-((?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?",
          "^v?(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)(?:-((?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?$",
          "[v=\\\\s]*([0-9]+)\\\\.([0-9]+)\\\\.([0-9]+)(?:-?((?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?",
          "^[v=\\\\s]*([0-9]+)\\\\.([0-9]+)\\\\.([0-9]+)(?:-?((?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?$",
          "((?:<|>)?=?)",
          "[0-9]+|x|X|\\\\*",
          "0|[1-9]\\\\d*|x|X|\\\\*",
          "[v=\\\\s]*(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:(?:-((?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)?)?",
          "[v=\\\\s]*([0-9]+|x|X|\\\\*)(?:\\\\.([0-9]+|x|X|\\\\*)(?:\\\\.([0-9]+|x|X|\\\\*)(?:(?:-?((?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)?)?",
          "^((?:<|>)?=?)\\\\s*[v=\\\\s]*(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:(?:-((?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)?)?$",
          "^((?:<|>)?=?)\\\\s*[v=\\\\s]*([0-9]+|x|X|\\\\*)(?:\\\\.([0-9]+|x|X|\\\\*)(?:\\\\.([0-9]+|x|X|\\\\*)(?:(?:-?((?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)?)?$",
          "(^|[^\\\\d])(\\\\d{1,16})(?:\\\\.(\\\\d{1,16}))?(?:\\\\.(\\\\d{1,16}))?(?:$|[^\\\\d])",
          "(^|[^\\\\d])(\\\\d{1,16})(?:\\\\.(\\\\d{1,16}))?(?:\\\\.(\\\\d{1,16}))?(?:$|[^\\\\d])",
          "(?:~>?)",
          "(\\\\s*)(?:~>?)\\\\s+",
          "^(?:~>?)[v=\\\\s]*(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:(?:-((?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)?)?$",
          "^(?:~>?)[v=\\\\s]*([0-9]+|x|X|\\\\*)(?:\\\\.([0-9]+|x|X|\\\\*)(?:\\\\.([0-9]+|x|X|\\\\*)(?:(?:-?((?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)?)?$",
          "(?:\\\\^)",
          "(\\\\s*)(?:\\\\^)\\\\s+",
          "^(?:\\\\^)[v=\\\\s]*(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:(?:-((?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)?)?$",
          "^(?:\\\\^)[v=\\\\s]*([0-9]+|x|X|\\\\*)(?:\\\\.([0-9]+|x|X|\\\\*)(?:\\\\.([0-9]+|x|X|\\\\*)(?:(?:-?((?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)?)?$",
          "^((?:<|>)?=?)\\\\s*([v=\\\\s]*([0-9]+)\\\\.([0-9]+)\\\\.([0-9]+)(?:-?((?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)$|^$",
          "^((?:<|>)?=?)\\\\s*(v?(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)(?:-((?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)$|^$",
          "(\\\\s*)((?:<|>)?=?)\\\\s*([v=\\\\s]*([0-9]+)\\\\.([0-9]+)\\\\.([0-9]+)(?:-?((?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?|[v=\\\\s]*(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:(?:-((?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)?)?)",
          "^\\\\s*([v=\\\\s]*(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:(?:-((?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)?)?)\\\\s+-\\\\s+([v=\\\\s]*(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:(?:-((?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)?)?)\\\\s*$",
          "^\\\\s*([v=\\\\s]*([0-9]+|x|X|\\\\*)(?:\\\\.([0-9]+|x|X|\\\\*)(?:\\\\.([0-9]+|x|X|\\\\*)(?:(?:-?((?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)?)?)\\\\s+-\\\\s+([v=\\\\s]*([0-9]+|x|X|\\\\*)(?:\\\\.([0-9]+|x|X|\\\\*)(?:\\\\.([0-9]+|x|X|\\\\*)(?:(?:-?((?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)?)?)\\\\s*$",
          "(<|>)?=?\\\\s*\\\\*",
          "^\\\\s*>=\\\\s*0.0.0\\\\s*$",
          "^\\\\s*>=\\\\s*0.0.0-0\\\\s*$",
        ],
        "subset": Function subset(sub, dom, options),
        "toComparators": Function toComparators(range, options),
        "tokens": Object {
          "BUILD": 10,
          "BUILDIDENTIFIER": 9,
          "CARET": 30,
          "CARETLOOSE": 31,
          "CARETTRIM": 29,
          "COERCE": 22,
          "COERCERTL": 23,
          "COMPARATOR": 33,
          "COMPARATORLOOSE": 32,
          "COMPARATORTRIM": 34,
          "FULL": 12,
          "FULLPLAIN": 11,
          "GTE0": 38,
          "GTE0PRE": 39,
          "GTLT": 15,
          "HYPHENRANGE": 35,
          "HYPHENRANGELOOSE": 36,
          "LONECARET": 28,
          "LONETILDE": 24,
          "LOOSE": 14,
          "LOOSEPLAIN": 13,
          "MAINVERSION": 3,
          "MAINVERSIONLOOSE": 4,
          "NONNUMERICIDENTIFIER": 2,
          "NUMERICIDENTIFIER": 0,
          "NUMERICIDENTIFIERLOOSE": 1,
          "PRERELEASE": 7,
          "PRERELEASEIDENTIFIER": 5,
          "PRERELEASEIDENTIFIERLOOSE": 6,
          "PRERELEASELOOSE": 8,
          "STAR": 37,
          "TILDE": 26,
          "TILDELOOSE": 27,
          "TILDETRIM": 25,
          "XRANGE": 20,
          "XRANGEIDENTIFIER": 17,
          "XRANGEIDENTIFIERLOOSE": 16,
          "XRANGELOOSE": 21,
          "XRANGEPLAIN": 18,
          "XRANGEPLAINLOOSE": 19,
        },
        "valid": Function valid(version, options),
        "validRange": Function validRange(range, options),
      },
    ],
    "noproxy": Array [
      null,
      Function String(),
      Function Array(),
    ],
    "offline": Function Boolean(),
    "omit": Array [
      Function Array(),
      "dev",
      "optional",
      "peer",
    ],
    "only": Array [
      null,
      "dev",
      "development",
      "prod",
      "production",
    ],
    "optional": Function Boolean(),
    "otp": Array [
      null,
      Function String(),
    ],
    "package": Array [
      Function String(),
      Function Array(),
    ],
    "package-lock": Function Boolean(),
    "package-lock-only": Function Boolean(),
    "parseable": Function Boolean(),
    "prefer-offline": Function Boolean(),
    "prefer-online": Function Boolean(),
    "prefix": &ref_1 Object {
      "_makeLong": Function toNamespacedPath(path),
      "basename": Function basename(path, ext),
      "delimiter": ":",
      "dirname": Function dirname(path),
      "extname": Function extname(path),
      "format": Function bound _format(),
      "isAbsolute": Function isAbsolute(path),
      "join": Function join(...args),
      "normalize": Function normalize(path),
      "parse": Function parse(path),
      "posix": <*ref_1>,
      "relative": Function relative(from, to),
      "resolve": Function resolve(...args),
      "sep": "/",
      "toNamespacedPath": Function toNamespacedPath(path),
      "win32": &ref_2 Object {
        "_makeLong": Function toNamespacedPath(path),
        "basename": Function basename(path, ext),
        "delimiter": ";",
        "dirname": Function dirname(path),
        "extname": Function extname(path),
        "format": Function bound _format(),
        "isAbsolute": Function isAbsolute(path),
        "join": Function join(...args),
        "normalize": Function normalize(path),
        "parse": Function parse(path),
        "posix": <*ref_1>,
        "relative": Function relative(from, to),
        "resolve": Function resolve(...args),
        "sep": "\\\\",
        "toNamespacedPath": Function toNamespacedPath(path),
        "win32": <*ref_2>,
      },
    },
    "preid": Function String(),
    "production": Function Boolean(),
    "progress": Function Boolean(),
    "proxy": Array [
      null,
      false,
      Object {
        "domainToASCII": Function domainToASCII(domain),
        "domainToUnicode": Function domainToUnicode(domain),
        "fileURLToPath": Function fileURLToPath(path),
        "format": Function urlFormat(urlObject, options),
        "parse": Function urlParse(url, parseQueryString, slashesDenoteHost),
        "pathToFileURL": Function pathToFileURL(filepath),
        "resolve": Function urlResolve(source, relative),
        "resolveObject": Function urlResolveObject(source, relative),
        "Url": Function Url(),
        "URL": Function URL(classURL),
        "URLSearchParams": Function URLSearchParams(classURLSearchParams),
      },
    ],
    "read-only": Function Boolean(),
    "rebuild-bundle": Function Boolean(),
    "registry": Array [
      null,
      Object {
        "domainToASCII": Function domainToASCII(domain),
        "domainToUnicode": Function domainToUnicode(domain),
        "fileURLToPath": Function fileURLToPath(path),
        "format": Function urlFormat(urlObject, options),
        "parse": Function urlParse(url, parseQueryString, slashesDenoteHost),
        "pathToFileURL": Function pathToFileURL(filepath),
        "resolve": Function urlResolve(source, relative),
        "resolveObject": Function urlResolveObject(source, relative),
        "Url": Function Url(),
        "URL": Function URL(classURL),
        "URLSearchParams": Function URLSearchParams(classURLSearchParams),
      },
    ],
    "rollback": Function Boolean(),
    "save": Function Boolean(),
    "save-bundle": Function Boolean(),
    "save-dev": Function Boolean(),
    "save-exact": Function Boolean(),
    "save-optional": Function Boolean(),
    "save-prefix": Function String(),
    "save-prod": Function Boolean(),
    "scope": Function String(),
    "script-shell": Array [
      null,
      Function String(),
    ],
    "scripts-prepend-node-path": Array [
      Function Boolean(),
      "auto",
      "warn-only",
    ],
    "searchexclude": Array [
      null,
      Function String(),
    ],
    "searchlimit": Function Number(),
    "searchopts": Function String(),
    "searchstaleness": Function Number(),
    "send-metrics": Function Boolean(),
    "shell": Function String(),
    "shrinkwrap": Function Boolean(),
    "sign-git-commit": Function Boolean(),
    "sign-git-tag": Function Boolean(),
    "sso-poll-frequency": Function Number(),
    "sso-type": Array [
      null,
      "oauth",
      "saml",
    ],
    "strict-ssl": Function Boolean(),
    "tag": Function String(),
    "tag-version-prefix": Function String(),
    "timing": Function Boolean(),
    "tmp": &ref_1 Object {
      "_makeLong": Function toNamespacedPath(path),
      "basename": Function basename(path, ext),
      "delimiter": ":",
      "dirname": Function dirname(path),
      "extname": Function extname(path),
      "format": Function bound _format(),
      "isAbsolute": Function isAbsolute(path),
      "join": Function join(...args),
      "normalize": Function normalize(path),
      "parse": Function parse(path),
      "posix": <*ref_1>,
      "relative": Function relative(from, to),
      "resolve": Function resolve(...args),
      "sep": "/",
      "toNamespacedPath": Function toNamespacedPath(path),
      "win32": &ref_2 Object {
        "_makeLong": Function toNamespacedPath(path),
        "basename": Function basename(path, ext),
        "delimiter": ";",
        "dirname": Function dirname(path),
        "extname": Function extname(path),
        "format": Function bound _format(),
        "isAbsolute": Function isAbsolute(path),
        "join": Function join(...args),
        "normalize": Function normalize(path),
        "parse": Function parse(path),
        "posix": <*ref_1>,
        "relative": Function relative(from, to),
        "resolve": Function resolve(...args),
        "sep": "\\\\",
        "toNamespacedPath": Function toNamespacedPath(path),
        "win32": <*ref_2>,
      },
    },
    "umask": Function Umask(classUmask),
    "unicode": Function Boolean(),
    "update-notifier": Function Boolean(),
    "usage": Function Boolean(),
    "user-agent": Function String(),
    "userconfig": &ref_1 Object {
      "_makeLong": Function toNamespacedPath(path),
      "basename": Function basename(path, ext),
      "delimiter": ":",
      "dirname": Function dirname(path),
      "extname": Function extname(path),
      "format": Function bound _format(),
      "isAbsolute": Function isAbsolute(path),
      "join": Function join(...args),
      "normalize": Function normalize(path),
      "parse": Function parse(path),
      "posix": <*ref_1>,
      "relative": Function relative(from, to),
      "resolve": Function resolve(...args),
      "sep": "/",
      "toNamespacedPath": Function toNamespacedPath(path),
      "win32": &ref_2 Object {
        "_makeLong": Function toNamespacedPath(path),
        "basename": Function basename(path, ext),
        "delimiter": ";",
        "dirname": Function dirname(path),
        "extname": Function extname(path),
        "format": Function bound _format(),
        "isAbsolute": Function isAbsolute(path),
        "join": Function join(...args),
        "normalize": Function normalize(path),
        "parse": Function parse(path),
        "posix": <*ref_1>,
        "relative": Function relative(from, to),
        "resolve": Function resolve(...args),
        "sep": "\\\\",
        "toNamespacedPath": Function toNamespacedPath(path),
        "win32": <*ref_2>,
      },
    },
    "version": Function Boolean(),
    "versions": Function Boolean(),
    "viewer": Function String(),
  },
}
`

exports[`test/lib/utils/config.js TAP no working network interfaces, on windows > must match snapshot 1`] = `
Object {
  "defaults": Object {
    "access": null,
    "all": false,
    "allow-same-version": false,
    "also": null,
    "always-auth": false,
    "audit": true,
    "audit-level": null,
    "auth-type": "legacy",
    "before": null,
    "bin-links": true,
    "browser": null,
    "ca": null,
    "cache": "~/npm-cache",
    "cache-lock-retries": 10,
    "cache-lock-stale": 60000,
    "cache-lock-wait": 10000,
    "cache-max": null,
    "cache-min": 10,
    "cafile": null,
    "call": "",
    "cert": null,
    "cidr": null,
    "color": true,
    "commit-hooks": true,
    "depth": 0,
    "description": true,
    "dev": false,
    "dry-run": false,
    "editor": "vim",
    "engine-strict": false,
    "fetch-retries": 2,
    "fetch-retry-factor": 10,
    "fetch-retry-maxtimeout": 60000,
    "fetch-retry-mintimeout": 10000,
    "force": false,
    "format-package-lock": true,
    "fund": true,
    "git": "git",
    "git-tag-version": true,
    "global": false,
    "global-style": false,
    "heading": "npm",
    "https-proxy": null,
    "if-present": false,
    "ignore-prepublish": false,
    "ignore-scripts": false,
    "include": Array [],
    "include-staged": false,
    "init-author-email": "",
    "init-author-name": "",
    "init-author-url": "",
    "init-license": "ISC",
    "init-module": "~/.npm-init.js",
    "init-version": "1.0.0",
    "json": false,
    "key": null,
    "legacy-bundling": false,
    "legacy-peer-deps": false,
    "link": false,
    "local-address": undefined,
    "loglevel": "notice",
    "logs-max": 10,
    "long": false,
    "maxsockets": 50,
    "message": "%s",
    "metrics-registry": null,
    "node-options": null,
    "node-version": "v14.8.0",
    "noproxy": null,
    "offline": false,
    "omit": Array [],
    "only": null,
    "optional": true,
    "otp": null,
    "package": Array [],
    "package-lock": true,
    "package-lock-only": false,
    "parseable": false,
    "prefer-offline": false,
    "prefer-online": false,
    "preid": "",
    "production": false,
    "progress": true,
    "proxy": null,
    "read-only": false,
    "rebuild-bundle": true,
    "registry": "https://registry.npmjs.org/",
    "rollback": true,
    "save": true,
    "save-bundle": false,
    "save-dev": false,
    "save-exact": false,
    "save-optional": false,
    "save-prefix": "^",
    "save-prod": false,
    "scope": "",
    "script-shell": null,
    "scripts-prepend-node-path": "warn-only",
    "searchexclude": null,
    "searchlimit": 20,
    "searchopts": "",
    "searchstaleness": 900,
    "send-metrics": false,
    "shell": "cmd.exe",
    "shrinkwrap": true,
    "sign-git-commit": false,
    "sign-git-tag": false,
    "sso-poll-frequency": 500,
    "sso-type": "oauth",
    "strict-ssl": true,
    "tag": "latest",
    "tag-version-prefix": "v",
    "timing": false,
    "tmp": "/tmp",
    "umask": 22,
    "unicode": true,
    "update-notifier": true,
    "usage": false,
    "user-agent": "npm/{npm-version} node/{node-version} {platform} {arch} {ci}",
    "userconfig": "~/.npmrc",
    "version": false,
    "versions": false,
    "viewer": "browser",
  },
  "shorthands": Object {
    "?": Array [
      "--usage",
    ],
    "a": Array [
      "--all",
    ],
    "B": Array [
      "--save-bundle",
    ],
    "c": Array [
      "--call",
    ],
    "C": Array [
      "--prefix",
    ],
    "d": Array [
      "--loglevel",
      "info",
    ],
    "D": Array [
      "--save-dev",
    ],
    "dd": Array [
      "--loglevel",
      "verbose",
    ],
    "ddd": Array [
      "--loglevel",
      "silly",
    ],
    "desc": Array [
      "--description",
    ],
    "E": Array [
      "--save-exact",
    ],
    "enjoy-by": Array [
      "--before",
    ],
    "f": Array [
      "--force",
    ],
    "g": Array [
      "--global",
    ],
    "h": Array [
      "--usage",
    ],
    "H": Array [
      "--usage",
    ],
    "help": Array [
      "--usage",
    ],
    "l": Array [
      "--long",
    ],
    "local": Array [
      "--no-global",
    ],
    "m": Array [
      "--message",
    ],
    "n": Array [
      "--no-yes",
    ],
    "N": Array [
      "--no-registry",
    ],
    "no-desc": Array [
      "--no-description",
    ],
    "no-reg": Array [
      "--no-registry",
    ],
    "noreg": Array [
      "--no-registry",
    ],
    "O": Array [
      "--save-optional",
    ],
    "p": Array [
      "--parseable",
    ],
    "P": Array [
      "--save-prod",
    ],
    "porcelain": Array [
      "--parseable",
    ],
    "q": Array [
      "--loglevel",
      "warn",
    ],
    "quiet": Array [
      "--loglevel",
      "warn",
    ],
    "readonly": Array [
      "--read-only",
    ],
    "reg": Array [
      "--registry",
    ],
    "s": Array [
      "--loglevel",
      "silent",
    ],
    "S": Array [
      "--save",
    ],
    "silent": Array [
      "--loglevel",
      "silent",
    ],
    "v": Array [
      "--version",
    ],
    "verbose": Array [
      "--loglevel",
      "verbose",
    ],
    "y": Array [
      "--yes",
    ],
  },
  "types": Object {
    "access": Array [
      null,
      "restricted",
      "public",
    ],
    "all": Function Boolean(),
    "allow-same-version": Function Boolean(),
    "also": Array [
      null,
      "dev",
      "development",
    ],
    "always-auth": Function Boolean(),
    "audit": Function Boolean(),
    "audit-level": Array [
      "low",
      "moderate",
      "high",
      "critical",
      "none",
      null,
    ],
    "auth-type": Array [
      "legacy",
      "sso",
      "saml",
      "oauth",
    ],
    "before": Array [
      null,
      Function Date(),
    ],
    "bin-links": Function Boolean(),
    "browser": Array [
      null,
      Function Boolean(),
      Function String(),
    ],
    "ca": Array [
      null,
      Function String(),
      Function Array(),
    ],
    "cache": &ref_1 Object {
      "_makeLong": Function toNamespacedPath(path),
      "basename": Function basename(path, ext),
      "delimiter": ":",
      "dirname": Function dirname(path),
      "extname": Function extname(path),
      "format": Function bound _format(),
      "isAbsolute": Function isAbsolute(path),
      "join": Function join(...args),
      "normalize": Function normalize(path),
      "parse": Function parse(path),
      "posix": <*ref_1>,
      "relative": Function relative(from, to),
      "resolve": Function resolve(...args),
      "sep": "/",
      "toNamespacedPath": Function toNamespacedPath(path),
      "win32": &ref_2 Object {
        "_makeLong": Function toNamespacedPath(path),
        "basename": Function basename(path, ext),
        "delimiter": ";",
        "dirname": Function dirname(path),
        "extname": Function extname(path),
        "format": Function bound _format(),
        "isAbsolute": Function isAbsolute(path),
        "join": Function join(...args),
        "normalize": Function normalize(path),
        "parse": Function parse(path),
        "posix": <*ref_1>,
        "relative": Function relative(from, to),
        "resolve": Function resolve(...args),
        "sep": "\\\\",
        "toNamespacedPath": Function toNamespacedPath(path),
        "win32": <*ref_2>,
      },
    },
    "cache-lock-retries": Function Number(),
    "cache-lock-stale": Function Number(),
    "cache-lock-wait": Function Number(),
    "cache-max": Function Number(),
    "cache-min": Function Number(),
    "cafile": &ref_1 Object {
      "_makeLong": Function toNamespacedPath(path),
      "basename": Function basename(path, ext),
      "delimiter": ":",
      "dirname": Function dirname(path),
      "extname": Function extname(path),
      "format": Function bound _format(),
      "isAbsolute": Function isAbsolute(path),
      "join": Function join(...args),
      "normalize": Function normalize(path),
      "parse": Function parse(path),
      "posix": <*ref_1>,
      "relative": Function relative(from, to),
      "resolve": Function resolve(...args),
      "sep": "/",
      "toNamespacedPath": Function toNamespacedPath(path),
      "win32": &ref_2 Object {
        "_makeLong": Function toNamespacedPath(path),
        "basename": Function basename(path, ext),
        "delimiter": ";",
        "dirname": Function dirname(path),
        "extname": Function extname(path),
        "format": Function bound _format(),
        "isAbsolute": Function isAbsolute(path),
        "join": Function join(...args),
        "normalize": Function normalize(path),
        "parse": Function parse(path),
        "posix": <*ref_1>,
        "relative": Function relative(from, to),
        "resolve": Function resolve(...args),
        "sep": "\\\\",
        "toNamespacedPath": Function toNamespacedPath(path),
        "win32": <*ref_2>,
      },
    },
    "call": Function String(),
    "cert": Array [
      null,
      Function String(),
    ],
    "cidr": Array [
      null,
      Function String(),
      Function Array(),
    ],
    "color": Array [
      "always",
      Function Boolean(),
    ],
    "commit-hooks": Function Boolean(),
    "depth": Function Number(),
    "description": Function Boolean(),
    "dev": Function Boolean(),
    "dry-run": Function Boolean(),
    "editor": Function String(),
    "engine-strict": Function Boolean(),
    "fetch-retries": Function Number(),
    "fetch-retry-factor": Function Number(),
    "fetch-retry-maxtimeout": Function Number(),
    "fetch-retry-mintimeout": Function Number(),
    "force": Function Boolean(),
    "format-package-lock": Function Boolean(),
    "fund": Function Boolean(),
    "git": Function String(),
    "git-tag-version": Function Boolean(),
    "global": Function Boolean(),
    "global-style": Function Boolean(),
    "globalconfig": &ref_1 Object {
      "_makeLong": Function toNamespacedPath(path),
      "basename": Function basename(path, ext),
      "delimiter": ":",
      "dirname": Function dirname(path),
      "extname": Function extname(path),
      "format": Function bound _format(),
      "isAbsolute": Function isAbsolute(path),
      "join": Function join(...args),
      "normalize": Function normalize(path),
      "parse": Function parse(path),
      "posix": <*ref_1>,
      "relative": Function relative(from, to),
      "resolve": Function resolve(...args),
      "sep": "/",
      "toNamespacedPath": Function toNamespacedPath(path),
      "win32": &ref_2 Object {
        "_makeLong": Function toNamespacedPath(path),
        "basename": Function basename(path, ext),
        "delimiter": ";",
        "dirname": Function dirname(path),
        "extname": Function extname(path),
        "format": Function bound _format(),
        "isAbsolute": Function isAbsolute(path),
        "join": Function join(...args),
        "normalize": Function normalize(path),
        "parse": Function parse(path),
        "posix": <*ref_1>,
        "relative": Function relative(from, to),
        "resolve": Function resolve(...args),
        "sep": "\\\\",
        "toNamespacedPath": Function toNamespacedPath(path),
        "win32": <*ref_2>,
      },
    },
    "group": Array [
      Function Number(),
      Function String(),
    ],
    "ham-it-up": Function Boolean(),
    "heading": Function String(),
    "https-proxy": Array [
      null,
      Object {
        "domainToASCII": Function domainToASCII(domain),
        "domainToUnicode": Function domainToUnicode(domain),
        "fileURLToPath": Function fileURLToPath(path),
        "format": Function urlFormat(urlObject, options),
        "parse": Function urlParse(url, parseQueryString, slashesDenoteHost),
        "pathToFileURL": Function pathToFileURL(filepath),
        "resolve": Function urlResolve(source, relative),
        "resolveObject": Function urlResolveObject(source, relative),
        "Url": Function Url(),
        "URL": Function URL(classURL),
        "URLSearchParams": Function URLSearchParams(classURLSearchParams),
      },
    ],
    "if-present": Function Boolean(),
    "ignore-prepublish": Function Boolean(),
    "ignore-scripts": Function Boolean(),
    "include": Array [
      Function Array(),
      "prod",
      "dev",
      "optional",
      "peer",
    ],
    "include-staged": Function Boolean(),
    "init-author-email": Function String(),
    "init-author-name": Function String(),
    "init-author-url": Array [
      "",
      Object {
        "domainToASCII": Function domainToASCII(domain),
        "domainToUnicode": Function domainToUnicode(domain),
        "fileURLToPath": Function fileURLToPath(path),
        "format": Function urlFormat(urlObject, options),
        "parse": Function urlParse(url, parseQueryString, slashesDenoteHost),
        "pathToFileURL": Function pathToFileURL(filepath),
        "resolve": Function urlResolve(source, relative),
        "resolveObject": Function urlResolveObject(source, relative),
        "Url": Function Url(),
        "URL": Function URL(classURL),
        "URLSearchParams": Function URLSearchParams(classURLSearchParams),
      },
    ],
    "init-license": Function String(),
    "init-module": &ref_1 Object {
      "_makeLong": Function toNamespacedPath(path),
      "basename": Function basename(path, ext),
      "delimiter": ":",
      "dirname": Function dirname(path),
      "extname": Function extname(path),
      "format": Function bound _format(),
      "isAbsolute": Function isAbsolute(path),
      "join": Function join(...args),
      "normalize": Function normalize(path),
      "parse": Function parse(path),
      "posix": <*ref_1>,
      "relative": Function relative(from, to),
      "resolve": Function resolve(...args),
      "sep": "/",
      "toNamespacedPath": Function toNamespacedPath(path),
      "win32": &ref_2 Object {
        "_makeLong": Function toNamespacedPath(path),
        "basename": Function basename(path, ext),
        "delimiter": ";",
        "dirname": Function dirname(path),
        "extname": Function extname(path),
        "format": Function bound _format(),
        "isAbsolute": Function isAbsolute(path),
        "join": Function join(...args),
        "normalize": Function normalize(path),
        "parse": Function parse(path),
        "posix": <*ref_1>,
        "relative": Function relative(from, to),
        "resolve": Function resolve(...args),
        "sep": "\\\\",
        "toNamespacedPath": Function toNamespacedPath(path),
        "win32": <*ref_2>,
      },
    },
    "init-version": Object {
      "clean": Function clean(version, options),
      "cmp": Function cmp(a, op, b, loose),
      "coerce": Function coerce(version, options),
      "Comparator": Function Comparator(classComparator),
      "compare": Function compare(a, b, loose),
      "compareBuild": Function compareBuild(a, b, loose),
      "compareIdentifiers": Function compareIdentifiers(a, b),
      "compareLoose": Function compareLoose(a, b),
      "diff": Function diff(version1, version2),
      "eq": Function eq(a, b, loose),
      "gt": Function gt(a, b, loose),
      "gte": Function gte(a, b, loose),
      "gtr": Function gtr(version, range, options),
      "inc": Function inc(version, release, options, identifier),
      "intersects": Function intersects(r1, r2, options),
      "lt": Function lt(a, b, loose),
      "lte": Function lte(a, b, loose),
      "ltr": Function ltr(version, range, options),
      "major": Function major(a, loose),
      "maxSatisfying": Function maxSatisfying(versions, range, options),
      "minor": Function minor(a, loose),
      "minSatisfying": Function minSatisfying(versions, range, options),
      "minVersion": Function minVersion(range, loose),
      "neq": Function neq(a, b, loose),
      "outside": Function outside(version, range, hilo, options),
      "parse": Function parse(version, options),
      "patch": Function patch(a, loose),
      "prerelease": Function prerelease(version, options),
      "Range": Function Range(classRange),
      "rcompare": Function rcompare(a, b, loose),
      "rcompareIdentifiers": Function rcompareIdentifiers(a, b),
      "re": Array [
        /0|[1-9]\\d*/,
        /[0-9]+/,
        /\\d*[a-zA-Z-][a-zA-Z0-9-]*/,
        /(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)/,
        /([0-9]+)\\.([0-9]+)\\.([0-9]+)/,
        /(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)/,
        /(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)/,
        /(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))/,
        /(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))/,
        /[0-9A-Za-z-]+/,
        /(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))/,
        /v?(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?/,
        /^v?(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?$/,
        /[v=\\s]*([0-9]+)\\.([0-9]+)\\.([0-9]+)(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?/,
        /^[v=\\s]*([0-9]+)\\.([0-9]+)\\.([0-9]+)(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?$/,
        /((?:<|>)?=?)/,
        /[0-9]+|x|X|\\*/,
        /0|[1-9]\\d*|x|X|\\*/,
        /[v=\\s]*(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?/,
        /[v=\\s]*([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?/,
        /^((?:<|>)?=?)\\s*[v=\\s]*(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?$/,
        /^((?:<|>)?=?)\\s*[v=\\s]*([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?$/,
        /(^|[^\\d])(\\d{1,16})(?:\\.(\\d{1,16}))?(?:\\.(\\d{1,16}))?(?:$|[^\\d])/,
        /(^|[^\\d])(\\d{1,16})(?:\\.(\\d{1,16}))?(?:\\.(\\d{1,16}))?(?:$|[^\\d])/g,
        /(?:~>?)/,
        /(\\s*)(?:~>?)\\s+/g,
        /^(?:~>?)[v=\\s]*(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?$/,
        /^(?:~>?)[v=\\s]*([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?$/,
        /(?:\\^)/,
        /(\\s*)(?:\\^)\\s+/g,
        /^(?:\\^)[v=\\s]*(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?$/,
        /^(?:\\^)[v=\\s]*([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?$/,
        /^((?:<|>)?=?)\\s*([v=\\s]*([0-9]+)\\.([0-9]+)\\.([0-9]+)(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)$|^$/,
        /^((?:<|>)?=?)\\s*(v?(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)$|^$/,
        /(\\s*)((?:<|>)?=?)\\s*([v=\\s]*([0-9]+)\\.([0-9]+)\\.([0-9]+)(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?|[v=\\s]*(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?)/g,
        /^\\s*([v=\\s]*(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?)\\s+-\\s+([v=\\s]*(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?)\\s*$/,
        /^\\s*([v=\\s]*([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?)\\s+-\\s+([v=\\s]*([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?)\\s*$/,
        /(<|>)?=?\\s*\\*/,
        /^\\s*>=\\s*0.0.0\\s*$/,
        /^\\s*>=\\s*0.0.0-0\\s*$/,
      ],
      "rsort": Function rsort(list, loose),
      "satisfies": Function satisfies(version, range, options),
      "SemVer": Function SemVer(classSemVer),
      "SEMVER_SPEC_VERSION": "2.0.0",
      "simplifyRange": Function (versions, range, options),
      "sort": Function sort(list, loose),
      "src": Array [
        "0|[1-9]\\\\d*",
        "[0-9]+",
        "\\\\d*[a-zA-Z-][a-zA-Z0-9-]*",
        "(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)",
        "([0-9]+)\\\\.([0-9]+)\\\\.([0-9]+)",
        "(?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)",
        "(?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)",
        "(?:-((?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))",
        "(?:-?((?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))",
        "[0-9A-Za-z-]+",
        "(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))",
        "v?(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)(?:-((?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?",
        "^v?(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)(?:-((?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?$",
        "[v=\\\\s]*([0-9]+)\\\\.([0-9]+)\\\\.([0-9]+)(?:-?((?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?",
        "^[v=\\\\s]*([0-9]+)\\\\.([0-9]+)\\\\.([0-9]+)(?:-?((?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?$",
        "((?:<|>)?=?)",
        "[0-9]+|x|X|\\\\*",
        "0|[1-9]\\\\d*|x|X|\\\\*",
        "[v=\\\\s]*(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:(?:-((?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)?)?",
        "[v=\\\\s]*([0-9]+|x|X|\\\\*)(?:\\\\.([0-9]+|x|X|\\\\*)(?:\\\\.([0-9]+|x|X|\\\\*)(?:(?:-?((?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)?)?",
        "^((?:<|>)?=?)\\\\s*[v=\\\\s]*(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:(?:-((?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)?)?$",
        "^((?:<|>)?=?)\\\\s*[v=\\\\s]*([0-9]+|x|X|\\\\*)(?:\\\\.([0-9]+|x|X|\\\\*)(?:\\\\.([0-9]+|x|X|\\\\*)(?:(?:-?((?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)?)?$",
        "(^|[^\\\\d])(\\\\d{1,16})(?:\\\\.(\\\\d{1,16}))?(?:\\\\.(\\\\d{1,16}))?(?:$|[^\\\\d])",
        "(^|[^\\\\d])(\\\\d{1,16})(?:\\\\.(\\\\d{1,16}))?(?:\\\\.(\\\\d{1,16}))?(?:$|[^\\\\d])",
        "(?:~>?)",
        "(\\\\s*)(?:~>?)\\\\s+",
        "^(?:~>?)[v=\\\\s]*(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:(?:-((?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)?)?$",
        "^(?:~>?)[v=\\\\s]*([0-9]+|x|X|\\\\*)(?:\\\\.([0-9]+|x|X|\\\\*)(?:\\\\.([0-9]+|x|X|\\\\*)(?:(?:-?((?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)?)?$",
        "(?:\\\\^)",
        "(\\\\s*)(?:\\\\^)\\\\s+",
        "^(?:\\\\^)[v=\\\\s]*(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:(?:-((?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)?)?$",
        "^(?:\\\\^)[v=\\\\s]*([0-9]+|x|X|\\\\*)(?:\\\\.([0-9]+|x|X|\\\\*)(?:\\\\.([0-9]+|x|X|\\\\*)(?:(?:-?((?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)?)?$",
        "^((?:<|>)?=?)\\\\s*([v=\\\\s]*([0-9]+)\\\\.([0-9]+)\\\\.([0-9]+)(?:-?((?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)$|^$",
        "^((?:<|>)?=?)\\\\s*(v?(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)(?:-((?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)$|^$",
        "(\\\\s*)((?:<|>)?=?)\\\\s*([v=\\\\s]*([0-9]+)\\\\.([0-9]+)\\\\.([0-9]+)(?:-?((?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?|[v=\\\\s]*(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:(?:-((?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)?)?)",
        "^\\\\s*([v=\\\\s]*(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:(?:-((?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)?)?)\\\\s+-\\\\s+([v=\\\\s]*(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:(?:-((?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)?)?)\\\\s*$",
        "^\\\\s*([v=\\\\s]*([0-9]+|x|X|\\\\*)(?:\\\\.([0-9]+|x|X|\\\\*)(?:\\\\.([0-9]+|x|X|\\\\*)(?:(?:-?((?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)?)?)\\\\s+-\\\\s+([v=\\\\s]*([0-9]+|x|X|\\\\*)(?:\\\\.([0-9]+|x|X|\\\\*)(?:\\\\.([0-9]+|x|X|\\\\*)(?:(?:-?((?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)?)?)\\\\s*$",
        "(<|>)?=?\\\\s*\\\\*",
        "^\\\\s*>=\\\\s*0.0.0\\\\s*$",
        "^\\\\s*>=\\\\s*0.0.0-0\\\\s*$",
      ],
      "subset": Function subset(sub, dom, options),
      "toComparators": Function toComparators(range, options),
      "tokens": Object {
        "BUILD": 10,
        "BUILDIDENTIFIER": 9,
        "CARET": 30,
        "CARETLOOSE": 31,
        "CARETTRIM": 29,
        "COERCE": 22,
        "COERCERTL": 23,
        "COMPARATOR": 33,
        "COMPARATORLOOSE": 32,
        "COMPARATORTRIM": 34,
        "FULL": 12,
        "FULLPLAIN": 11,
        "GTE0": 38,
        "GTE0PRE": 39,
        "GTLT": 15,
        "HYPHENRANGE": 35,
        "HYPHENRANGELOOSE": 36,
        "LONECARET": 28,
        "LONETILDE": 24,
        "LOOSE": 14,
        "LOOSEPLAIN": 13,
        "MAINVERSION": 3,
        "MAINVERSIONLOOSE": 4,
        "NONNUMERICIDENTIFIER": 2,
        "NUMERICIDENTIFIER": 0,
        "NUMERICIDENTIFIERLOOSE": 1,
        "PRERELEASE": 7,
        "PRERELEASEIDENTIFIER": 5,
        "PRERELEASEIDENTIFIERLOOSE": 6,
        "PRERELEASELOOSE": 8,
        "STAR": 37,
        "TILDE": 26,
        "TILDELOOSE": 27,
        "TILDETRIM": 25,
        "XRANGE": 20,
        "XRANGEIDENTIFIER": 17,
        "XRANGEIDENTIFIERLOOSE": 16,
        "XRANGELOOSE": 21,
        "XRANGEPLAIN": 18,
        "XRANGEPLAINLOOSE": 19,
      },
      "valid": Function valid(version, options),
      "validRange": Function validRange(range, options),
    },
    "json": Function Boolean(),
    "key": Array [
      null,
      Function String(),
    ],
    "legacy-bundling": Function Boolean(),
    "legacy-peer-deps": Function Boolean(),
    "link": Function Boolean(),
    "local-address": Array [
      undefined,
    ],
    "loglevel": Array [
      "silent",
      "error",
      "warn",
      "notice",
      "http",
      "timing",
      "info",
      "verbose",
      "silly",
    ],
    "logs-max": Function Number(),
    "long": Function Boolean(),
    "maxsockets": Function Number(),
    "message": Function String(),
    "metrics-registry": Array [
      null,
      Function String(),
    ],
    "node-options": Array [
      null,
      Function String(),
    ],
    "node-version": Array [
      null,
      Object {
        "clean": Function clean(version, options),
        "cmp": Function cmp(a, op, b, loose),
        "coerce": Function coerce(version, options),
        "Comparator": Function Comparator(classComparator),
        "compare": Function compare(a, b, loose),
        "compareBuild": Function compareBuild(a, b, loose),
        "compareIdentifiers": Function compareIdentifiers(a, b),
        "compareLoose": Function compareLoose(a, b),
        "diff": Function diff(version1, version2),
        "eq": Function eq(a, b, loose),
        "gt": Function gt(a, b, loose),
        "gte": Function gte(a, b, loose),
        "gtr": Function gtr(version, range, options),
        "inc": Function inc(version, release, options, identifier),
        "intersects": Function intersects(r1, r2, options),
        "lt": Function lt(a, b, loose),
        "lte": Function lte(a, b, loose),
        "ltr": Function ltr(version, range, options),
        "major": Function major(a, loose),
        "maxSatisfying": Function maxSatisfying(versions, range, options),
        "minor": Function minor(a, loose),
        "minSatisfying": Function minSatisfying(versions, range, options),
        "minVersion": Function minVersion(range, loose),
        "neq": Function neq(a, b, loose),
        "outside": Function outside(version, range, hilo, options),
        "parse": Function parse(version, options),
        "patch": Function patch(a, loose),
        "prerelease": Function prerelease(version, options),
        "Range": Function Range(classRange),
        "rcompare": Function rcompare(a, b, loose),
        "rcompareIdentifiers": Function rcompareIdentifiers(a, b),
        "re": Array [
          /0|[1-9]\\d*/,
          /[0-9]+/,
          /\\d*[a-zA-Z-][a-zA-Z0-9-]*/,
          /(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)/,
          /([0-9]+)\\.([0-9]+)\\.([0-9]+)/,
          /(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)/,
          /(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)/,
          /(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))/,
          /(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))/,
          /[0-9A-Za-z-]+/,
          /(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))/,
          /v?(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?/,
          /^v?(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?$/,
          /[v=\\s]*([0-9]+)\\.([0-9]+)\\.([0-9]+)(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?/,
          /^[v=\\s]*([0-9]+)\\.([0-9]+)\\.([0-9]+)(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?$/,
          /((?:<|>)?=?)/,
          /[0-9]+|x|X|\\*/,
          /0|[1-9]\\d*|x|X|\\*/,
          /[v=\\s]*(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?/,
          /[v=\\s]*([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?/,
          /^((?:<|>)?=?)\\s*[v=\\s]*(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?$/,
          /^((?:<|>)?=?)\\s*[v=\\s]*([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?$/,
          /(^|[^\\d])(\\d{1,16})(?:\\.(\\d{1,16}))?(?:\\.(\\d{1,16}))?(?:$|[^\\d])/,
          /(^|[^\\d])(\\d{1,16})(?:\\.(\\d{1,16}))?(?:\\.(\\d{1,16}))?(?:$|[^\\d])/g,
          /(?:~>?)/,
          /(\\s*)(?:~>?)\\s+/g,
          /^(?:~>?)[v=\\s]*(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?$/,
          /^(?:~>?)[v=\\s]*([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?$/,
          /(?:\\^)/,
          /(\\s*)(?:\\^)\\s+/g,
          /^(?:\\^)[v=\\s]*(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?$/,
          /^(?:\\^)[v=\\s]*([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?$/,
          /^((?:<|>)?=?)\\s*([v=\\s]*([0-9]+)\\.([0-9]+)\\.([0-9]+)(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)$|^$/,
          /^((?:<|>)?=?)\\s*(v?(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)$|^$/,
          /(\\s*)((?:<|>)?=?)\\s*([v=\\s]*([0-9]+)\\.([0-9]+)\\.([0-9]+)(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?|[v=\\s]*(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?)/g,
          /^\\s*([v=\\s]*(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?)\\s+-\\s+([v=\\s]*(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?)\\s*$/,
          /^\\s*([v=\\s]*([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?)\\s+-\\s+([v=\\s]*([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?)\\s*$/,
          /(<|>)?=?\\s*\\*/,
          /^\\s*>=\\s*0.0.0\\s*$/,
          /^\\s*>=\\s*0.0.0-0\\s*$/,
        ],
        "rsort": Function rsort(list, loose),
        "satisfies": Function satisfies(version, range, options),
        "SemVer": Function SemVer(classSemVer),
        "SEMVER_SPEC_VERSION": "2.0.0",
        "simplifyRange": Function (versions, range, options),
        "sort": Function sort(list, loose),
        "src": Array [
          "0|[1-9]\\\\d*",
          "[0-9]+",
          "\\\\d*[a-zA-Z-][a-zA-Z0-9-]*",
          "(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)",
          "([0-9]+)\\\\.([0-9]+)\\\\.([0-9]+)",
          "(?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)",
          "(?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)",
          "(?:-((?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))",
          "(?:-?((?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))",
          "[0-9A-Za-z-]+",
          "(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))",
          "v?(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)(?:-((?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?",
          "^v?(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)(?:-((?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?$",
          "[v=\\\\s]*([0-9]+)\\\\.([0-9]+)\\\\.([0-9]+)(?:-?((?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?",
          "^[v=\\\\s]*([0-9]+)\\\\.([0-9]+)\\\\.([0-9]+)(?:-?((?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?$",
          "((?:<|>)?=?)",
          "[0-9]+|x|X|\\\\*",
          "0|[1-9]\\\\d*|x|X|\\\\*",
          "[v=\\\\s]*(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:(?:-((?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)?)?",
          "[v=\\\\s]*([0-9]+|x|X|\\\\*)(?:\\\\.([0-9]+|x|X|\\\\*)(?:\\\\.([0-9]+|x|X|\\\\*)(?:(?:-?((?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)?)?",
          "^((?:<|>)?=?)\\\\s*[v=\\\\s]*(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:(?:-((?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)?)?$",
          "^((?:<|>)?=?)\\\\s*[v=\\\\s]*([0-9]+|x|X|\\\\*)(?:\\\\.([0-9]+|x|X|\\\\*)(?:\\\\.([0-9]+|x|X|\\\\*)(?:(?:-?((?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)?)?$",
          "(^|[^\\\\d])(\\\\d{1,16})(?:\\\\.(\\\\d{1,16}))?(?:\\\\.(\\\\d{1,16}))?(?:$|[^\\\\d])",
          "(^|[^\\\\d])(\\\\d{1,16})(?:\\\\.(\\\\d{1,16}))?(?:\\\\.(\\\\d{1,16}))?(?:$|[^\\\\d])",
          "(?:~>?)",
          "(\\\\s*)(?:~>?)\\\\s+",
          "^(?:~>?)[v=\\\\s]*(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:(?:-((?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)?)?$",
          "^(?:~>?)[v=\\\\s]*([0-9]+|x|X|\\\\*)(?:\\\\.([0-9]+|x|X|\\\\*)(?:\\\\.([0-9]+|x|X|\\\\*)(?:(?:-?((?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)?)?$",
          "(?:\\\\^)",
          "(\\\\s*)(?:\\\\^)\\\\s+",
          "^(?:\\\\^)[v=\\\\s]*(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:(?:-((?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)?)?$",
          "^(?:\\\\^)[v=\\\\s]*([0-9]+|x|X|\\\\*)(?:\\\\.([0-9]+|x|X|\\\\*)(?:\\\\.([0-9]+|x|X|\\\\*)(?:(?:-?((?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)?)?$",
          "^((?:<|>)?=?)\\\\s*([v=\\\\s]*([0-9]+)\\\\.([0-9]+)\\\\.([0-9]+)(?:-?((?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)$|^$",
          "^((?:<|>)?=?)\\\\s*(v?(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)(?:-((?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)$|^$",
          "(\\\\s*)((?:<|>)?=?)\\\\s*([v=\\\\s]*([0-9]+)\\\\.([0-9]+)\\\\.([0-9]+)(?:-?((?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?|[v=\\\\s]*(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:(?:-((?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)?)?)",
          "^\\\\s*([v=\\\\s]*(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:(?:-((?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)?)?)\\\\s+-\\\\s+([v=\\\\s]*(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:(?:-((?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)?)?)\\\\s*$",
          "^\\\\s*([v=\\\\s]*([0-9]+|x|X|\\\\*)(?:\\\\.([0-9]+|x|X|\\\\*)(?:\\\\.([0-9]+|x|X|\\\\*)(?:(?:-?((?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)?)?)\\\\s+-\\\\s+([v=\\\\s]*([0-9]+|x|X|\\\\*)(?:\\\\.([0-9]+|x|X|\\\\*)(?:\\\\.([0-9]+|x|X|\\\\*)(?:(?:-?((?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)?)?)\\\\s*$",
          "(<|>)?=?\\\\s*\\\\*",
          "^\\\\s*>=\\\\s*0.0.0\\\\s*$",
          "^\\\\s*>=\\\\s*0.0.0-0\\\\s*$",
        ],
        "subset": Function subset(sub, dom, options),
        "toComparators": Function toComparators(range, options),
        "tokens": Object {
          "BUILD": 10,
          "BUILDIDENTIFIER": 9,
          "CARET": 30,
          "CARETLOOSE": 31,
          "CARETTRIM": 29,
          "COERCE": 22,
          "COERCERTL": 23,
          "COMPARATOR": 33,
          "COMPARATORLOOSE": 32,
          "COMPARATORTRIM": 34,
          "FULL": 12,
          "FULLPLAIN": 11,
          "GTE0": 38,
          "GTE0PRE": 39,
          "GTLT": 15,
          "HYPHENRANGE": 35,
          "HYPHENRANGELOOSE": 36,
          "LONECARET": 28,
          "LONETILDE": 24,
          "LOOSE": 14,
          "LOOSEPLAIN": 13,
          "MAINVERSION": 3,
          "MAINVERSIONLOOSE": 4,
          "NONNUMERICIDENTIFIER": 2,
          "NUMERICIDENTIFIER": 0,
          "NUMERICIDENTIFIERLOOSE": 1,
          "PRERELEASE": 7,
          "PRERELEASEIDENTIFIER": 5,
          "PRERELEASEIDENTIFIERLOOSE": 6,
          "PRERELEASELOOSE": 8,
          "STAR": 37,
          "TILDE": 26,
          "TILDELOOSE": 27,
          "TILDETRIM": 25,
          "XRANGE": 20,
          "XRANGEIDENTIFIER": 17,
          "XRANGEIDENTIFIERLOOSE": 16,
          "XRANGELOOSE": 21,
          "XRANGEPLAIN": 18,
          "XRANGEPLAINLOOSE": 19,
        },
        "valid": Function valid(version, options),
        "validRange": Function validRange(range, options),
      },
    ],
    "noproxy": Array [
      null,
      Function String(),
      Function Array(),
    ],
    "offline": Function Boolean(),
    "omit": Array [
      Function Array(),
      "dev",
      "optional",
      "peer",
    ],
    "only": Array [
      null,
      "dev",
      "development",
      "prod",
      "production",
    ],
    "optional": Function Boolean(),
    "otp": Array [
      null,
      Function String(),
    ],
    "package": Array [
      Function String(),
      Function Array(),
    ],
    "package-lock": Function Boolean(),
    "package-lock-only": Function Boolean(),
    "parseable": Function Boolean(),
    "prefer-offline": Function Boolean(),
    "prefer-online": Function Boolean(),
    "prefix": &ref_1 Object {
      "_makeLong": Function toNamespacedPath(path),
      "basename": Function basename(path, ext),
      "delimiter": ":",
      "dirname": Function dirname(path),
      "extname": Function extname(path),
      "format": Function bound _format(),
      "isAbsolute": Function isAbsolute(path),
      "join": Function join(...args),
      "normalize": Function normalize(path),
      "parse": Function parse(path),
      "posix": <*ref_1>,
      "relative": Function relative(from, to),
      "resolve": Function resolve(...args),
      "sep": "/",
      "toNamespacedPath": Function toNamespacedPath(path),
      "win32": &ref_2 Object {
        "_makeLong": Function toNamespacedPath(path),
        "basename": Function basename(path, ext),
        "delimiter": ";",
        "dirname": Function dirname(path),
        "extname": Function extname(path),
        "format": Function bound _format(),
        "isAbsolute": Function isAbsolute(path),
        "join": Function join(...args),
        "normalize": Function normalize(path),
        "parse": Function parse(path),
        "posix": <*ref_1>,
        "relative": Function relative(from, to),
        "resolve": Function resolve(...args),
        "sep": "\\\\",
        "toNamespacedPath": Function toNamespacedPath(path),
        "win32": <*ref_2>,
      },
    },
    "preid": Function String(),
    "production": Function Boolean(),
    "progress": Function Boolean(),
    "proxy": Array [
      null,
      false,
      Object {
        "domainToASCII": Function domainToASCII(domain),
        "domainToUnicode": Function domainToUnicode(domain),
        "fileURLToPath": Function fileURLToPath(path),
        "format": Function urlFormat(urlObject, options),
        "parse": Function urlParse(url, parseQueryString, slashesDenoteHost),
        "pathToFileURL": Function pathToFileURL(filepath),
        "resolve": Function urlResolve(source, relative),
        "resolveObject": Function urlResolveObject(source, relative),
        "Url": Function Url(),
        "URL": Function URL(classURL),
        "URLSearchParams": Function URLSearchParams(classURLSearchParams),
      },
    ],
    "read-only": Function Boolean(),
    "rebuild-bundle": Function Boolean(),
    "registry": Array [
      null,
      Object {
        "domainToASCII": Function domainToASCII(domain),
        "domainToUnicode": Function domainToUnicode(domain),
        "fileURLToPath": Function fileURLToPath(path),
        "format": Function urlFormat(urlObject, options),
        "parse": Function urlParse(url, parseQueryString, slashesDenoteHost),
        "pathToFileURL": Function pathToFileURL(filepath),
        "resolve": Function urlResolve(source, relative),
        "resolveObject": Function urlResolveObject(source, relative),
        "Url": Function Url(),
        "URL": Function URL(classURL),
        "URLSearchParams": Function URLSearchParams(classURLSearchParams),
      },
    ],
    "rollback": Function Boolean(),
    "save": Function Boolean(),
    "save-bundle": Function Boolean(),
    "save-dev": Function Boolean(),
    "save-exact": Function Boolean(),
    "save-optional": Function Boolean(),
    "save-prefix": Function String(),
    "save-prod": Function Boolean(),
    "scope": Function String(),
    "script-shell": Array [
      null,
      Function String(),
    ],
    "scripts-prepend-node-path": Array [
      Function Boolean(),
      "auto",
      "warn-only",
    ],
    "searchexclude": Array [
      null,
      Function String(),
    ],
    "searchlimit": Function Number(),
    "searchopts": Function String(),
    "searchstaleness": Function Number(),
    "send-metrics": Function Boolean(),
    "shell": Function String(),
    "shrinkwrap": Function Boolean(),
    "sign-git-commit": Function Boolean(),
    "sign-git-tag": Function Boolean(),
    "sso-poll-frequency": Function Number(),
    "sso-type": Array [
      null,
      "oauth",
      "saml",
    ],
    "strict-ssl": Function Boolean(),
    "tag": Function String(),
    "tag-version-prefix": Function String(),
    "timing": Function Boolean(),
    "tmp": &ref_1 Object {
      "_makeLong": Function toNamespacedPath(path),
      "basename": Function basename(path, ext),
      "delimiter": ":",
      "dirname": Function dirname(path),
      "extname": Function extname(path),
      "format": Function bound _format(),
      "isAbsolute": Function isAbsolute(path),
      "join": Function join(...args),
      "normalize": Function normalize(path),
      "parse": Function parse(path),
      "posix": <*ref_1>,
      "relative": Function relative(from, to),
      "resolve": Function resolve(...args),
      "sep": "/",
      "toNamespacedPath": Function toNamespacedPath(path),
      "win32": &ref_2 Object {
        "_makeLong": Function toNamespacedPath(path),
        "basename": Function basename(path, ext),
        "delimiter": ";",
        "dirname": Function dirname(path),
        "extname": Function extname(path),
        "format": Function bound _format(),
        "isAbsolute": Function isAbsolute(path),
        "join": Function join(...args),
        "normalize": Function normalize(path),
        "parse": Function parse(path),
        "posix": <*ref_1>,
        "relative": Function relative(from, to),
        "resolve": Function resolve(...args),
        "sep": "\\\\",
        "toNamespacedPath": Function toNamespacedPath(path),
        "win32": <*ref_2>,
      },
    },
    "umask": Function Umask(classUmask),
    "unicode": Function Boolean(),
    "update-notifier": Function Boolean(),
    "usage": Function Boolean(),
    "user-agent": Function String(),
    "userconfig": &ref_1 Object {
      "_makeLong": Function toNamespacedPath(path),
      "basename": Function basename(path, ext),
      "delimiter": ":",
      "dirname": Function dirname(path),
      "extname": Function extname(path),
      "format": Function bound _format(),
      "isAbsolute": Function isAbsolute(path),
      "join": Function join(...args),
      "normalize": Function normalize(path),
      "parse": Function parse(path),
      "posix": <*ref_1>,
      "relative": Function relative(from, to),
      "resolve": Function resolve(...args),
      "sep": "/",
      "toNamespacedPath": Function toNamespacedPath(path),
      "win32": &ref_2 Object {
        "_makeLong": Function toNamespacedPath(path),
        "basename": Function basename(path, ext),
        "delimiter": ";",
        "dirname": Function dirname(path),
        "extname": Function extname(path),
        "format": Function bound _format(),
        "isAbsolute": Function isAbsolute(path),
        "join": Function join(...args),
        "normalize": Function normalize(path),
        "parse": Function parse(path),
        "posix": <*ref_1>,
        "relative": Function relative(from, to),
        "resolve": Function resolve(...args),
        "sep": "\\\\",
        "toNamespacedPath": Function toNamespacedPath(path),
        "win32": <*ref_2>,
      },
    },
    "version": Function Boolean(),
    "versions": Function Boolean(),
    "viewer": Function String(),
  },
}
`

exports[`test/lib/utils/config.js TAP working network interfaces, not windows > must match snapshot 1`] = `
Object {
  "defaults": Object {
    "access": null,
    "all": false,
    "allow-same-version": false,
    "also": null,
    "always-auth": false,
    "audit": true,
    "audit-level": null,
    "auth-type": "legacy",
    "before": null,
    "bin-links": true,
    "browser": null,
    "ca": null,
    "cache": "~/.npm",
    "cache-lock-retries": 10,
    "cache-lock-stale": 60000,
    "cache-lock-wait": 10000,
    "cache-max": null,
    "cache-min": 10,
    "cafile": null,
    "call": "",
    "cert": null,
    "cidr": null,
    "color": true,
    "commit-hooks": true,
    "depth": 0,
    "description": true,
    "dev": false,
    "dry-run": false,
    "editor": "vim",
    "engine-strict": false,
    "fetch-retries": 2,
    "fetch-retry-factor": 10,
    "fetch-retry-maxtimeout": 60000,
    "fetch-retry-mintimeout": 10000,
    "force": false,
    "format-package-lock": true,
    "fund": true,
    "git": "git",
    "git-tag-version": true,
    "global": false,
    "global-style": false,
    "heading": "npm",
    "https-proxy": null,
    "if-present": false,
    "ignore-prepublish": false,
    "ignore-scripts": false,
    "include": Array [],
    "include-staged": false,
    "init-author-email": "",
    "init-author-name": "",
    "init-author-url": "",
    "init-license": "ISC",
    "init-module": "~/.npm-init.js",
    "init-version": "1.0.0",
    "json": false,
    "key": null,
    "legacy-bundling": false,
    "legacy-peer-deps": false,
    "link": false,
    "local-address": undefined,
    "loglevel": "notice",
    "logs-max": 10,
    "long": false,
    "maxsockets": 50,
    "message": "%s",
    "metrics-registry": null,
    "node-options": null,
    "node-version": "v14.8.0",
    "noproxy": null,
    "offline": false,
    "omit": Array [],
    "only": null,
    "optional": true,
    "otp": null,
    "package": Array [],
    "package-lock": true,
    "package-lock-only": false,
    "parseable": false,
    "prefer-offline": false,
    "prefer-online": false,
    "preid": "",
    "production": false,
    "progress": true,
    "proxy": null,
    "read-only": false,
    "rebuild-bundle": true,
    "registry": "https://registry.npmjs.org/",
    "rollback": true,
    "save": true,
    "save-bundle": false,
    "save-dev": false,
    "save-exact": false,
    "save-optional": false,
    "save-prefix": "^",
    "save-prod": false,
    "scope": "",
    "script-shell": null,
    "scripts-prepend-node-path": "warn-only",
    "searchexclude": null,
    "searchlimit": 20,
    "searchopts": "",
    "searchstaleness": 900,
    "send-metrics": false,
    "shell": "/usr/local/bin/bash",
    "shrinkwrap": true,
    "sign-git-commit": false,
    "sign-git-tag": false,
    "sso-poll-frequency": 500,
    "sso-type": "oauth",
    "strict-ssl": true,
    "tag": "latest",
    "tag-version-prefix": "v",
    "timing": false,
    "tmp": "/tmp",
    "umask": 22,
    "unicode": true,
    "update-notifier": true,
    "usage": false,
    "user-agent": "npm/{npm-version} node/{node-version} {platform} {arch} {ci}",
    "userconfig": "~/.npmrc",
    "version": false,
    "versions": false,
    "viewer": "man",
  },
  "shorthands": Object {
    "?": Array [
      "--usage",
    ],
    "a": Array [
      "--all",
    ],
    "B": Array [
      "--save-bundle",
    ],
    "c": Array [
      "--call",
    ],
    "C": Array [
      "--prefix",
    ],
    "d": Array [
      "--loglevel",
      "info",
    ],
    "D": Array [
      "--save-dev",
    ],
    "dd": Array [
      "--loglevel",
      "verbose",
    ],
    "ddd": Array [
      "--loglevel",
      "silly",
    ],
    "desc": Array [
      "--description",
    ],
    "E": Array [
      "--save-exact",
    ],
    "enjoy-by": Array [
      "--before",
    ],
    "f": Array [
      "--force",
    ],
    "g": Array [
      "--global",
    ],
    "h": Array [
      "--usage",
    ],
    "H": Array [
      "--usage",
    ],
    "help": Array [
      "--usage",
    ],
    "l": Array [
      "--long",
    ],
    "local": Array [
      "--no-global",
    ],
    "m": Array [
      "--message",
    ],
    "n": Array [
      "--no-yes",
    ],
    "N": Array [
      "--no-registry",
    ],
    "no-desc": Array [
      "--no-description",
    ],
    "no-reg": Array [
      "--no-registry",
    ],
    "noreg": Array [
      "--no-registry",
    ],
    "O": Array [
      "--save-optional",
    ],
    "p": Array [
      "--parseable",
    ],
    "P": Array [
      "--save-prod",
    ],
    "porcelain": Array [
      "--parseable",
    ],
    "q": Array [
      "--loglevel",
      "warn",
    ],
    "quiet": Array [
      "--loglevel",
      "warn",
    ],
    "readonly": Array [
      "--read-only",
    ],
    "reg": Array [
      "--registry",
    ],
    "s": Array [
      "--loglevel",
      "silent",
    ],
    "S": Array [
      "--save",
    ],
    "silent": Array [
      "--loglevel",
      "silent",
    ],
    "v": Array [
      "--version",
    ],
    "verbose": Array [
      "--loglevel",
      "verbose",
    ],
    "y": Array [
      "--yes",
    ],
  },
  "types": Object {
    "access": Array [
      null,
      "restricted",
      "public",
    ],
    "all": Function Boolean(),
    "allow-same-version": Function Boolean(),
    "also": Array [
      null,
      "dev",
      "development",
    ],
    "always-auth": Function Boolean(),
    "audit": Function Boolean(),
    "audit-level": Array [
      "low",
      "moderate",
      "high",
      "critical",
      "none",
      null,
    ],
    "auth-type": Array [
      "legacy",
      "sso",
      "saml",
      "oauth",
    ],
    "before": Array [
      null,
      Function Date(),
    ],
    "bin-links": Function Boolean(),
    "browser": Array [
      null,
      Function Boolean(),
      Function String(),
    ],
    "ca": Array [
      null,
      Function String(),
      Function Array(),
    ],
    "cache": &ref_1 Object {
      "_makeLong": Function toNamespacedPath(path),
      "basename": Function basename(path, ext),
      "delimiter": ":",
      "dirname": Function dirname(path),
      "extname": Function extname(path),
      "format": Function bound _format(),
      "isAbsolute": Function isAbsolute(path),
      "join": Function join(...args),
      "normalize": Function normalize(path),
      "parse": Function parse(path),
      "posix": <*ref_1>,
      "relative": Function relative(from, to),
      "resolve": Function resolve(...args),
      "sep": "/",
      "toNamespacedPath": Function toNamespacedPath(path),
      "win32": &ref_2 Object {
        "_makeLong": Function toNamespacedPath(path),
        "basename": Function basename(path, ext),
        "delimiter": ";",
        "dirname": Function dirname(path),
        "extname": Function extname(path),
        "format": Function bound _format(),
        "isAbsolute": Function isAbsolute(path),
        "join": Function join(...args),
        "normalize": Function normalize(path),
        "parse": Function parse(path),
        "posix": <*ref_1>,
        "relative": Function relative(from, to),
        "resolve": Function resolve(...args),
        "sep": "\\\\",
        "toNamespacedPath": Function toNamespacedPath(path),
        "win32": <*ref_2>,
      },
    },
    "cache-lock-retries": Function Number(),
    "cache-lock-stale": Function Number(),
    "cache-lock-wait": Function Number(),
    "cache-max": Function Number(),
    "cache-min": Function Number(),
    "cafile": &ref_1 Object {
      "_makeLong": Function toNamespacedPath(path),
      "basename": Function basename(path, ext),
      "delimiter": ":",
      "dirname": Function dirname(path),
      "extname": Function extname(path),
      "format": Function bound _format(),
      "isAbsolute": Function isAbsolute(path),
      "join": Function join(...args),
      "normalize": Function normalize(path),
      "parse": Function parse(path),
      "posix": <*ref_1>,
      "relative": Function relative(from, to),
      "resolve": Function resolve(...args),
      "sep": "/",
      "toNamespacedPath": Function toNamespacedPath(path),
      "win32": &ref_2 Object {
        "_makeLong": Function toNamespacedPath(path),
        "basename": Function basename(path, ext),
        "delimiter": ";",
        "dirname": Function dirname(path),
        "extname": Function extname(path),
        "format": Function bound _format(),
        "isAbsolute": Function isAbsolute(path),
        "join": Function join(...args),
        "normalize": Function normalize(path),
        "parse": Function parse(path),
        "posix": <*ref_1>,
        "relative": Function relative(from, to),
        "resolve": Function resolve(...args),
        "sep": "\\\\",
        "toNamespacedPath": Function toNamespacedPath(path),
        "win32": <*ref_2>,
      },
    },
    "call": Function String(),
    "cert": Array [
      null,
      Function String(),
    ],
    "cidr": Array [
      null,
      Function String(),
      Function Array(),
    ],
    "color": Array [
      "always",
      Function Boolean(),
    ],
    "commit-hooks": Function Boolean(),
    "depth": Function Number(),
    "description": Function Boolean(),
    "dev": Function Boolean(),
    "dry-run": Function Boolean(),
    "editor": Function String(),
    "engine-strict": Function Boolean(),
    "fetch-retries": Function Number(),
    "fetch-retry-factor": Function Number(),
    "fetch-retry-maxtimeout": Function Number(),
    "fetch-retry-mintimeout": Function Number(),
    "force": Function Boolean(),
    "format-package-lock": Function Boolean(),
    "fund": Function Boolean(),
    "git": Function String(),
    "git-tag-version": Function Boolean(),
    "global": Function Boolean(),
    "global-style": Function Boolean(),
    "globalconfig": &ref_1 Object {
      "_makeLong": Function toNamespacedPath(path),
      "basename": Function basename(path, ext),
      "delimiter": ":",
      "dirname": Function dirname(path),
      "extname": Function extname(path),
      "format": Function bound _format(),
      "isAbsolute": Function isAbsolute(path),
      "join": Function join(...args),
      "normalize": Function normalize(path),
      "parse": Function parse(path),
      "posix": <*ref_1>,
      "relative": Function relative(from, to),
      "resolve": Function resolve(...args),
      "sep": "/",
      "toNamespacedPath": Function toNamespacedPath(path),
      "win32": &ref_2 Object {
        "_makeLong": Function toNamespacedPath(path),
        "basename": Function basename(path, ext),
        "delimiter": ";",
        "dirname": Function dirname(path),
        "extname": Function extname(path),
        "format": Function bound _format(),
        "isAbsolute": Function isAbsolute(path),
        "join": Function join(...args),
        "normalize": Function normalize(path),
        "parse": Function parse(path),
        "posix": <*ref_1>,
        "relative": Function relative(from, to),
        "resolve": Function resolve(...args),
        "sep": "\\\\",
        "toNamespacedPath": Function toNamespacedPath(path),
        "win32": <*ref_2>,
      },
    },
    "group": Array [
      Function Number(),
      Function String(),
    ],
    "ham-it-up": Function Boolean(),
    "heading": Function String(),
    "https-proxy": Array [
      null,
      Object {
        "domainToASCII": Function domainToASCII(domain),
        "domainToUnicode": Function domainToUnicode(domain),
        "fileURLToPath": Function fileURLToPath(path),
        "format": Function urlFormat(urlObject, options),
        "parse": Function urlParse(url, parseQueryString, slashesDenoteHost),
        "pathToFileURL": Function pathToFileURL(filepath),
        "resolve": Function urlResolve(source, relative),
        "resolveObject": Function urlResolveObject(source, relative),
        "Url": Function Url(),
        "URL": Function URL(classURL),
        "URLSearchParams": Function URLSearchParams(classURLSearchParams),
      },
    ],
    "if-present": Function Boolean(),
    "ignore-prepublish": Function Boolean(),
    "ignore-scripts": Function Boolean(),
    "include": Array [
      Function Array(),
      "prod",
      "dev",
      "optional",
      "peer",
    ],
    "include-staged": Function Boolean(),
    "init-author-email": Function String(),
    "init-author-name": Function String(),
    "init-author-url": Array [
      "",
      Object {
        "domainToASCII": Function domainToASCII(domain),
        "domainToUnicode": Function domainToUnicode(domain),
        "fileURLToPath": Function fileURLToPath(path),
        "format": Function urlFormat(urlObject, options),
        "parse": Function urlParse(url, parseQueryString, slashesDenoteHost),
        "pathToFileURL": Function pathToFileURL(filepath),
        "resolve": Function urlResolve(source, relative),
        "resolveObject": Function urlResolveObject(source, relative),
        "Url": Function Url(),
        "URL": Function URL(classURL),
        "URLSearchParams": Function URLSearchParams(classURLSearchParams),
      },
    ],
    "init-license": Function String(),
    "init-module": &ref_1 Object {
      "_makeLong": Function toNamespacedPath(path),
      "basename": Function basename(path, ext),
      "delimiter": ":",
      "dirname": Function dirname(path),
      "extname": Function extname(path),
      "format": Function bound _format(),
      "isAbsolute": Function isAbsolute(path),
      "join": Function join(...args),
      "normalize": Function normalize(path),
      "parse": Function parse(path),
      "posix": <*ref_1>,
      "relative": Function relative(from, to),
      "resolve": Function resolve(...args),
      "sep": "/",
      "toNamespacedPath": Function toNamespacedPath(path),
      "win32": &ref_2 Object {
        "_makeLong": Function toNamespacedPath(path),
        "basename": Function basename(path, ext),
        "delimiter": ";",
        "dirname": Function dirname(path),
        "extname": Function extname(path),
        "format": Function bound _format(),
        "isAbsolute": Function isAbsolute(path),
        "join": Function join(...args),
        "normalize": Function normalize(path),
        "parse": Function parse(path),
        "posix": <*ref_1>,
        "relative": Function relative(from, to),
        "resolve": Function resolve(...args),
        "sep": "\\\\",
        "toNamespacedPath": Function toNamespacedPath(path),
        "win32": <*ref_2>,
      },
    },
    "init-version": Object {
      "clean": Function clean(version, options),
      "cmp": Function cmp(a, op, b, loose),
      "coerce": Function coerce(version, options),
      "Comparator": Function Comparator(classComparator),
      "compare": Function compare(a, b, loose),
      "compareBuild": Function compareBuild(a, b, loose),
      "compareIdentifiers": Function compareIdentifiers(a, b),
      "compareLoose": Function compareLoose(a, b),
      "diff": Function diff(version1, version2),
      "eq": Function eq(a, b, loose),
      "gt": Function gt(a, b, loose),
      "gte": Function gte(a, b, loose),
      "gtr": Function gtr(version, range, options),
      "inc": Function inc(version, release, options, identifier),
      "intersects": Function intersects(r1, r2, options),
      "lt": Function lt(a, b, loose),
      "lte": Function lte(a, b, loose),
      "ltr": Function ltr(version, range, options),
      "major": Function major(a, loose),
      "maxSatisfying": Function maxSatisfying(versions, range, options),
      "minor": Function minor(a, loose),
      "minSatisfying": Function minSatisfying(versions, range, options),
      "minVersion": Function minVersion(range, loose),
      "neq": Function neq(a, b, loose),
      "outside": Function outside(version, range, hilo, options),
      "parse": Function parse(version, options),
      "patch": Function patch(a, loose),
      "prerelease": Function prerelease(version, options),
      "Range": Function Range(classRange),
      "rcompare": Function rcompare(a, b, loose),
      "rcompareIdentifiers": Function rcompareIdentifiers(a, b),
      "re": Array [
        /0|[1-9]\\d*/,
        /[0-9]+/,
        /\\d*[a-zA-Z-][a-zA-Z0-9-]*/,
        /(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)/,
        /([0-9]+)\\.([0-9]+)\\.([0-9]+)/,
        /(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)/,
        /(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)/,
        /(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))/,
        /(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))/,
        /[0-9A-Za-z-]+/,
        /(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))/,
        /v?(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?/,
        /^v?(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?$/,
        /[v=\\s]*([0-9]+)\\.([0-9]+)\\.([0-9]+)(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?/,
        /^[v=\\s]*([0-9]+)\\.([0-9]+)\\.([0-9]+)(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?$/,
        /((?:<|>)?=?)/,
        /[0-9]+|x|X|\\*/,
        /0|[1-9]\\d*|x|X|\\*/,
        /[v=\\s]*(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?/,
        /[v=\\s]*([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?/,
        /^((?:<|>)?=?)\\s*[v=\\s]*(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?$/,
        /^((?:<|>)?=?)\\s*[v=\\s]*([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?$/,
        /(^|[^\\d])(\\d{1,16})(?:\\.(\\d{1,16}))?(?:\\.(\\d{1,16}))?(?:$|[^\\d])/,
        /(^|[^\\d])(\\d{1,16})(?:\\.(\\d{1,16}))?(?:\\.(\\d{1,16}))?(?:$|[^\\d])/g,
        /(?:~>?)/,
        /(\\s*)(?:~>?)\\s+/g,
        /^(?:~>?)[v=\\s]*(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?$/,
        /^(?:~>?)[v=\\s]*([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?$/,
        /(?:\\^)/,
        /(\\s*)(?:\\^)\\s+/g,
        /^(?:\\^)[v=\\s]*(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?$/,
        /^(?:\\^)[v=\\s]*([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?$/,
        /^((?:<|>)?=?)\\s*([v=\\s]*([0-9]+)\\.([0-9]+)\\.([0-9]+)(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)$|^$/,
        /^((?:<|>)?=?)\\s*(v?(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)$|^$/,
        /(\\s*)((?:<|>)?=?)\\s*([v=\\s]*([0-9]+)\\.([0-9]+)\\.([0-9]+)(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?|[v=\\s]*(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?)/g,
        /^\\s*([v=\\s]*(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?)\\s+-\\s+([v=\\s]*(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?)\\s*$/,
        /^\\s*([v=\\s]*([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?)\\s+-\\s+([v=\\s]*([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?)\\s*$/,
        /(<|>)?=?\\s*\\*/,
        /^\\s*>=\\s*0.0.0\\s*$/,
        /^\\s*>=\\s*0.0.0-0\\s*$/,
      ],
      "rsort": Function rsort(list, loose),
      "satisfies": Function satisfies(version, range, options),
      "SemVer": Function SemVer(classSemVer),
      "SEMVER_SPEC_VERSION": "2.0.0",
      "simplifyRange": Function (versions, range, options),
      "sort": Function sort(list, loose),
      "src": Array [
        "0|[1-9]\\\\d*",
        "[0-9]+",
        "\\\\d*[a-zA-Z-][a-zA-Z0-9-]*",
        "(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)",
        "([0-9]+)\\\\.([0-9]+)\\\\.([0-9]+)",
        "(?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)",
        "(?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)",
        "(?:-((?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))",
        "(?:-?((?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))",
        "[0-9A-Za-z-]+",
        "(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))",
        "v?(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)(?:-((?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?",
        "^v?(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)(?:-((?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?$",
        "[v=\\\\s]*([0-9]+)\\\\.([0-9]+)\\\\.([0-9]+)(?:-?((?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?",
        "^[v=\\\\s]*([0-9]+)\\\\.([0-9]+)\\\\.([0-9]+)(?:-?((?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?$",
        "((?:<|>)?=?)",
        "[0-9]+|x|X|\\\\*",
        "0|[1-9]\\\\d*|x|X|\\\\*",
        "[v=\\\\s]*(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:(?:-((?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)?)?",
        "[v=\\\\s]*([0-9]+|x|X|\\\\*)(?:\\\\.([0-9]+|x|X|\\\\*)(?:\\\\.([0-9]+|x|X|\\\\*)(?:(?:-?((?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)?)?",
        "^((?:<|>)?=?)\\\\s*[v=\\\\s]*(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:(?:-((?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)?)?$",
        "^((?:<|>)?=?)\\\\s*[v=\\\\s]*([0-9]+|x|X|\\\\*)(?:\\\\.([0-9]+|x|X|\\\\*)(?:\\\\.([0-9]+|x|X|\\\\*)(?:(?:-?((?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)?)?$",
        "(^|[^\\\\d])(\\\\d{1,16})(?:\\\\.(\\\\d{1,16}))?(?:\\\\.(\\\\d{1,16}))?(?:$|[^\\\\d])",
        "(^|[^\\\\d])(\\\\d{1,16})(?:\\\\.(\\\\d{1,16}))?(?:\\\\.(\\\\d{1,16}))?(?:$|[^\\\\d])",
        "(?:~>?)",
        "(\\\\s*)(?:~>?)\\\\s+",
        "^(?:~>?)[v=\\\\s]*(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:(?:-((?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)?)?$",
        "^(?:~>?)[v=\\\\s]*([0-9]+|x|X|\\\\*)(?:\\\\.([0-9]+|x|X|\\\\*)(?:\\\\.([0-9]+|x|X|\\\\*)(?:(?:-?((?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)?)?$",
        "(?:\\\\^)",
        "(\\\\s*)(?:\\\\^)\\\\s+",
        "^(?:\\\\^)[v=\\\\s]*(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:(?:-((?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)?)?$",
        "^(?:\\\\^)[v=\\\\s]*([0-9]+|x|X|\\\\*)(?:\\\\.([0-9]+|x|X|\\\\*)(?:\\\\.([0-9]+|x|X|\\\\*)(?:(?:-?((?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)?)?$",
        "^((?:<|>)?=?)\\\\s*([v=\\\\s]*([0-9]+)\\\\.([0-9]+)\\\\.([0-9]+)(?:-?((?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)$|^$",
        "^((?:<|>)?=?)\\\\s*(v?(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)(?:-((?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)$|^$",
        "(\\\\s*)((?:<|>)?=?)\\\\s*([v=\\\\s]*([0-9]+)\\\\.([0-9]+)\\\\.([0-9]+)(?:-?((?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?|[v=\\\\s]*(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:(?:-((?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)?)?)",
        "^\\\\s*([v=\\\\s]*(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:(?:-((?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)?)?)\\\\s+-\\\\s+([v=\\\\s]*(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:(?:-((?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)?)?)\\\\s*$",
        "^\\\\s*([v=\\\\s]*([0-9]+|x|X|\\\\*)(?:\\\\.([0-9]+|x|X|\\\\*)(?:\\\\.([0-9]+|x|X|\\\\*)(?:(?:-?((?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)?)?)\\\\s+-\\\\s+([v=\\\\s]*([0-9]+|x|X|\\\\*)(?:\\\\.([0-9]+|x|X|\\\\*)(?:\\\\.([0-9]+|x|X|\\\\*)(?:(?:-?((?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)?)?)\\\\s*$",
        "(<|>)?=?\\\\s*\\\\*",
        "^\\\\s*>=\\\\s*0.0.0\\\\s*$",
        "^\\\\s*>=\\\\s*0.0.0-0\\\\s*$",
      ],
      "subset": Function subset(sub, dom, options),
      "toComparators": Function toComparators(range, options),
      "tokens": Object {
        "BUILD": 10,
        "BUILDIDENTIFIER": 9,
        "CARET": 30,
        "CARETLOOSE": 31,
        "CARETTRIM": 29,
        "COERCE": 22,
        "COERCERTL": 23,
        "COMPARATOR": 33,
        "COMPARATORLOOSE": 32,
        "COMPARATORTRIM": 34,
        "FULL": 12,
        "FULLPLAIN": 11,
        "GTE0": 38,
        "GTE0PRE": 39,
        "GTLT": 15,
        "HYPHENRANGE": 35,
        "HYPHENRANGELOOSE": 36,
        "LONECARET": 28,
        "LONETILDE": 24,
        "LOOSE": 14,
        "LOOSEPLAIN": 13,
        "MAINVERSION": 3,
        "MAINVERSIONLOOSE": 4,
        "NONNUMERICIDENTIFIER": 2,
        "NUMERICIDENTIFIER": 0,
        "NUMERICIDENTIFIERLOOSE": 1,
        "PRERELEASE": 7,
        "PRERELEASEIDENTIFIER": 5,
        "PRERELEASEIDENTIFIERLOOSE": 6,
        "PRERELEASELOOSE": 8,
        "STAR": 37,
        "TILDE": 26,
        "TILDELOOSE": 27,
        "TILDETRIM": 25,
        "XRANGE": 20,
        "XRANGEIDENTIFIER": 17,
        "XRANGEIDENTIFIERLOOSE": 16,
        "XRANGELOOSE": 21,
        "XRANGEPLAIN": 18,
        "XRANGEPLAINLOOSE": 19,
      },
      "valid": Function valid(version, options),
      "validRange": Function validRange(range, options),
    },
    "json": Function Boolean(),
    "key": Array [
      null,
      Function String(),
    ],
    "legacy-bundling": Function Boolean(),
    "legacy-peer-deps": Function Boolean(),
    "link": Function Boolean(),
    "local-address": Array [
      undefined,
      "127.0.0.1",
      "no place like home",
    ],
    "loglevel": Array [
      "silent",
      "error",
      "warn",
      "notice",
      "http",
      "timing",
      "info",
      "verbose",
      "silly",
    ],
    "logs-max": Function Number(),
    "long": Function Boolean(),
    "maxsockets": Function Number(),
    "message": Function String(),
    "metrics-registry": Array [
      null,
      Function String(),
    ],
    "node-options": Array [
      null,
      Function String(),
    ],
    "node-version": Array [
      null,
      Object {
        "clean": Function clean(version, options),
        "cmp": Function cmp(a, op, b, loose),
        "coerce": Function coerce(version, options),
        "Comparator": Function Comparator(classComparator),
        "compare": Function compare(a, b, loose),
        "compareBuild": Function compareBuild(a, b, loose),
        "compareIdentifiers": Function compareIdentifiers(a, b),
        "compareLoose": Function compareLoose(a, b),
        "diff": Function diff(version1, version2),
        "eq": Function eq(a, b, loose),
        "gt": Function gt(a, b, loose),
        "gte": Function gte(a, b, loose),
        "gtr": Function gtr(version, range, options),
        "inc": Function inc(version, release, options, identifier),
        "intersects": Function intersects(r1, r2, options),
        "lt": Function lt(a, b, loose),
        "lte": Function lte(a, b, loose),
        "ltr": Function ltr(version, range, options),
        "major": Function major(a, loose),
        "maxSatisfying": Function maxSatisfying(versions, range, options),
        "minor": Function minor(a, loose),
        "minSatisfying": Function minSatisfying(versions, range, options),
        "minVersion": Function minVersion(range, loose),
        "neq": Function neq(a, b, loose),
        "outside": Function outside(version, range, hilo, options),
        "parse": Function parse(version, options),
        "patch": Function patch(a, loose),
        "prerelease": Function prerelease(version, options),
        "Range": Function Range(classRange),
        "rcompare": Function rcompare(a, b, loose),
        "rcompareIdentifiers": Function rcompareIdentifiers(a, b),
        "re": Array [
          /0|[1-9]\\d*/,
          /[0-9]+/,
          /\\d*[a-zA-Z-][a-zA-Z0-9-]*/,
          /(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)/,
          /([0-9]+)\\.([0-9]+)\\.([0-9]+)/,
          /(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)/,
          /(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)/,
          /(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))/,
          /(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))/,
          /[0-9A-Za-z-]+/,
          /(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))/,
          /v?(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?/,
          /^v?(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?$/,
          /[v=\\s]*([0-9]+)\\.([0-9]+)\\.([0-9]+)(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?/,
          /^[v=\\s]*([0-9]+)\\.([0-9]+)\\.([0-9]+)(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?$/,
          /((?:<|>)?=?)/,
          /[0-9]+|x|X|\\*/,
          /0|[1-9]\\d*|x|X|\\*/,
          /[v=\\s]*(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?/,
          /[v=\\s]*([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?/,
          /^((?:<|>)?=?)\\s*[v=\\s]*(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?$/,
          /^((?:<|>)?=?)\\s*[v=\\s]*([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?$/,
          /(^|[^\\d])(\\d{1,16})(?:\\.(\\d{1,16}))?(?:\\.(\\d{1,16}))?(?:$|[^\\d])/,
          /(^|[^\\d])(\\d{1,16})(?:\\.(\\d{1,16}))?(?:\\.(\\d{1,16}))?(?:$|[^\\d])/g,
          /(?:~>?)/,
          /(\\s*)(?:~>?)\\s+/g,
          /^(?:~>?)[v=\\s]*(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?$/,
          /^(?:~>?)[v=\\s]*([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?$/,
          /(?:\\^)/,
          /(\\s*)(?:\\^)\\s+/g,
          /^(?:\\^)[v=\\s]*(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?$/,
          /^(?:\\^)[v=\\s]*([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?$/,
          /^((?:<|>)?=?)\\s*([v=\\s]*([0-9]+)\\.([0-9]+)\\.([0-9]+)(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)$|^$/,
          /^((?:<|>)?=?)\\s*(v?(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)$|^$/,
          /(\\s*)((?:<|>)?=?)\\s*([v=\\s]*([0-9]+)\\.([0-9]+)\\.([0-9]+)(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?|[v=\\s]*(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?)/g,
          /^\\s*([v=\\s]*(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?)\\s+-\\s+([v=\\s]*(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?)\\s*$/,
          /^\\s*([v=\\s]*([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?)\\s+-\\s+([v=\\s]*([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?)\\s*$/,
          /(<|>)?=?\\s*\\*/,
          /^\\s*>=\\s*0.0.0\\s*$/,
          /^\\s*>=\\s*0.0.0-0\\s*$/,
        ],
        "rsort": Function rsort(list, loose),
        "satisfies": Function satisfies(version, range, options),
        "SemVer": Function SemVer(classSemVer),
        "SEMVER_SPEC_VERSION": "2.0.0",
        "simplifyRange": Function (versions, range, options),
        "sort": Function sort(list, loose),
        "src": Array [
          "0|[1-9]\\\\d*",
          "[0-9]+",
          "\\\\d*[a-zA-Z-][a-zA-Z0-9-]*",
          "(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)",
          "([0-9]+)\\\\.([0-9]+)\\\\.([0-9]+)",
          "(?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)",
          "(?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)",
          "(?:-((?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))",
          "(?:-?((?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))",
          "[0-9A-Za-z-]+",
          "(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))",
          "v?(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)(?:-((?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?",
          "^v?(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)(?:-((?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?$",
          "[v=\\\\s]*([0-9]+)\\\\.([0-9]+)\\\\.([0-9]+)(?:-?((?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?",
          "^[v=\\\\s]*([0-9]+)\\\\.([0-9]+)\\\\.([0-9]+)(?:-?((?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?$",
          "((?:<|>)?=?)",
          "[0-9]+|x|X|\\\\*",
          "0|[1-9]\\\\d*|x|X|\\\\*",
          "[v=\\\\s]*(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:(?:-((?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)?)?",
          "[v=\\\\s]*([0-9]+|x|X|\\\\*)(?:\\\\.([0-9]+|x|X|\\\\*)(?:\\\\.([0-9]+|x|X|\\\\*)(?:(?:-?((?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)?)?",
          "^((?:<|>)?=?)\\\\s*[v=\\\\s]*(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:(?:-((?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)?)?$",
          "^((?:<|>)?=?)\\\\s*[v=\\\\s]*([0-9]+|x|X|\\\\*)(?:\\\\.([0-9]+|x|X|\\\\*)(?:\\\\.([0-9]+|x|X|\\\\*)(?:(?:-?((?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)?)?$",
          "(^|[^\\\\d])(\\\\d{1,16})(?:\\\\.(\\\\d{1,16}))?(?:\\\\.(\\\\d{1,16}))?(?:$|[^\\\\d])",
          "(^|[^\\\\d])(\\\\d{1,16})(?:\\\\.(\\\\d{1,16}))?(?:\\\\.(\\\\d{1,16}))?(?:$|[^\\\\d])",
          "(?:~>?)",
          "(\\\\s*)(?:~>?)\\\\s+",
          "^(?:~>?)[v=\\\\s]*(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:(?:-((?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)?)?$",
          "^(?:~>?)[v=\\\\s]*([0-9]+|x|X|\\\\*)(?:\\\\.([0-9]+|x|X|\\\\*)(?:\\\\.([0-9]+|x|X|\\\\*)(?:(?:-?((?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)?)?$",
          "(?:\\\\^)",
          "(\\\\s*)(?:\\\\^)\\\\s+",
          "^(?:\\\\^)[v=\\\\s]*(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:(?:-((?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)?)?$",
          "^(?:\\\\^)[v=\\\\s]*([0-9]+|x|X|\\\\*)(?:\\\\.([0-9]+|x|X|\\\\*)(?:\\\\.([0-9]+|x|X|\\\\*)(?:(?:-?((?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)?)?$",
          "^((?:<|>)?=?)\\\\s*([v=\\\\s]*([0-9]+)\\\\.([0-9]+)\\\\.([0-9]+)(?:-?((?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)$|^$",
          "^((?:<|>)?=?)\\\\s*(v?(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)(?:-((?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)$|^$",
          "(\\\\s*)((?:<|>)?=?)\\\\s*([v=\\\\s]*([0-9]+)\\\\.([0-9]+)\\\\.([0-9]+)(?:-?((?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?|[v=\\\\s]*(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:(?:-((?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)?)?)",
          "^\\\\s*([v=\\\\s]*(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:(?:-((?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)?)?)\\\\s+-\\\\s+([v=\\\\s]*(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:\\\\.(0|[1-9]\\\\d*|x|X|\\\\*)(?:(?:-((?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)?)?)\\\\s*$",
          "^\\\\s*([v=\\\\s]*([0-9]+|x|X|\\\\*)(?:\\\\.([0-9]+|x|X|\\\\*)(?:\\\\.([0-9]+|x|X|\\\\*)(?:(?:-?((?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)?)?)\\\\s+-\\\\s+([v=\\\\s]*([0-9]+|x|X|\\\\*)(?:\\\\.([0-9]+|x|X|\\\\*)(?:\\\\.([0-9]+|x|X|\\\\*)(?:(?:-?((?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\\\.(?:[0-9]+|\\\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\\\+([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?)?)?)\\\\s*$",
          "(<|>)?=?\\\\s*\\\\*",
          "^\\\\s*>=\\\\s*0.0.0\\\\s*$",
          "^\\\\s*>=\\\\s*0.0.0-0\\\\s*$",
        ],
        "subset": Function subset(sub, dom, options),
        "toComparators": Function toComparators(range, options),
        "tokens": Object {
          "BUILD": 10,
          "BUILDIDENTIFIER": 9,
          "CARET": 30,
          "CARETLOOSE": 31,
          "CARETTRIM": 29,
          "COERCE": 22,
          "COERCERTL": 23,
          "COMPARATOR": 33,
          "COMPARATORLOOSE": 32,
          "COMPARATORTRIM": 34,
          "FULL": 12,
          "FULLPLAIN": 11,
          "GTE0": 38,
          "GTE0PRE": 39,
          "GTLT": 15,
          "HYPHENRANGE": 35,
          "HYPHENRANGELOOSE": 36,
          "LONECARET": 28,
          "LONETILDE": 24,
          "LOOSE": 14,
          "LOOSEPLAIN": 13,
          "MAINVERSION": 3,
          "MAINVERSIONLOOSE": 4,
          "NONNUMERICIDENTIFIER": 2,
          "NUMERICIDENTIFIER": 0,
          "NUMERICIDENTIFIERLOOSE": 1,
          "PRERELEASE": 7,
          "PRERELEASEIDENTIFIER": 5,
          "PRERELEASEIDENTIFIERLOOSE": 6,
          "PRERELEASELOOSE": 8,
          "STAR": 37,
          "TILDE": 26,
          "TILDELOOSE": 27,
          "TILDETRIM": 25,
          "XRANGE": 20,
          "XRANGEIDENTIFIER": 17,
          "XRANGEIDENTIFIERLOOSE": 16,
          "XRANGELOOSE": 21,
          "XRANGEPLAIN": 18,
          "XRANGEPLAINLOOSE": 19,
        },
        "valid": Function valid(version, options),
        "validRange": Function validRange(range, options),
      },
    ],
    "noproxy": Array [
      null,
      Function String(),
      Function Array(),
    ],
    "offline": Function Boolean(),
    "omit": Array [
      Function Array(),
      "dev",
      "optional",
      "peer",
    ],
    "only": Array [
      null,
      "dev",
      "development",
      "prod",
      "production",
    ],
    "optional": Function Boolean(),
    "otp": Array [
      null,
      Function String(),
    ],
    "package": Array [
      Function String(),
      Function Array(),
    ],
    "package-lock": Function Boolean(),
    "package-lock-only": Function Boolean(),
    "parseable": Function Boolean(),
    "prefer-offline": Function Boolean(),
    "prefer-online": Function Boolean(),
    "prefix": &ref_1 Object {
      "_makeLong": Function toNamespacedPath(path),
      "basename": Function basename(path, ext),
      "delimiter": ":",
      "dirname": Function dirname(path),
      "extname": Function extname(path),
      "format": Function bound _format(),
      "isAbsolute": Function isAbsolute(path),
      "join": Function join(...args),
      "normalize": Function normalize(path),
      "parse": Function parse(path),
      "posix": <*ref_1>,
      "relative": Function relative(from, to),
      "resolve": Function resolve(...args),
      "sep": "/",
      "toNamespacedPath": Function toNamespacedPath(path),
      "win32": &ref_2 Object {
        "_makeLong": Function toNamespacedPath(path),
        "basename": Function basename(path, ext),
        "delimiter": ";",
        "dirname": Function dirname(path),
        "extname": Function extname(path),
        "format": Function bound _format(),
        "isAbsolute": Function isAbsolute(path),
        "join": Function join(...args),
        "normalize": Function normalize(path),
        "parse": Function parse(path),
        "posix": <*ref_1>,
        "relative": Function relative(from, to),
        "resolve": Function resolve(...args),
        "sep": "\\\\",
        "toNamespacedPath": Function toNamespacedPath(path),
        "win32": <*ref_2>,
      },
    },
    "preid": Function String(),
    "production": Function Boolean(),
    "progress": Function Boolean(),
    "proxy": Array [
      null,
      false,
      Object {
        "domainToASCII": Function domainToASCII(domain),
        "domainToUnicode": Function domainToUnicode(domain),
        "fileURLToPath": Function fileURLToPath(path),
        "format": Function urlFormat(urlObject, options),
        "parse": Function urlParse(url, parseQueryString, slashesDenoteHost),
        "pathToFileURL": Function pathToFileURL(filepath),
        "resolve": Function urlResolve(source, relative),
        "resolveObject": Function urlResolveObject(source, relative),
        "Url": Function Url(),
        "URL": Function URL(classURL),
        "URLSearchParams": Function URLSearchParams(classURLSearchParams),
      },
    ],
    "read-only": Function Boolean(),
    "rebuild-bundle": Function Boolean(),
    "registry": Array [
      null,
      Object {
        "domainToASCII": Function domainToASCII(domain),
        "domainToUnicode": Function domainToUnicode(domain),
        "fileURLToPath": Function fileURLToPath(path),
        "format": Function urlFormat(urlObject, options),
        "parse": Function urlParse(url, parseQueryString, slashesDenoteHost),
        "pathToFileURL": Function pathToFileURL(filepath),
        "resolve": Function urlResolve(source, relative),
        "resolveObject": Function urlResolveObject(source, relative),
        "Url": Function Url(),
        "URL": Function URL(classURL),
        "URLSearchParams": Function URLSearchParams(classURLSearchParams),
      },
    ],
    "rollback": Function Boolean(),
    "save": Function Boolean(),
    "save-bundle": Function Boolean(),
    "save-dev": Function Boolean(),
    "save-exact": Function Boolean(),
    "save-optional": Function Boolean(),
    "save-prefix": Function String(),
    "save-prod": Function Boolean(),
    "scope": Function String(),
    "script-shell": Array [
      null,
      Function String(),
    ],
    "scripts-prepend-node-path": Array [
      Function Boolean(),
      "auto",
      "warn-only",
    ],
    "searchexclude": Array [
      null,
      Function String(),
    ],
    "searchlimit": Function Number(),
    "searchopts": Function String(),
    "searchstaleness": Function Number(),
    "send-metrics": Function Boolean(),
    "shell": Function String(),
    "shrinkwrap": Function Boolean(),
    "sign-git-commit": Function Boolean(),
    "sign-git-tag": Function Boolean(),
    "sso-poll-frequency": Function Number(),
    "sso-type": Array [
      null,
      "oauth",
      "saml",
    ],
    "strict-ssl": Function Boolean(),
    "tag": Function String(),
    "tag-version-prefix": Function String(),
    "timing": Function Boolean(),
    "tmp": &ref_1 Object {
      "_makeLong": Function toNamespacedPath(path),
      "basename": Function basename(path, ext),
      "delimiter": ":",
      "dirname": Function dirname(path),
      "extname": Function extname(path),
      "format": Function bound _format(),
      "isAbsolute": Function isAbsolute(path),
      "join": Function join(...args),
      "normalize": Function normalize(path),
      "parse": Function parse(path),
      "posix": <*ref_1>,
      "relative": Function relative(from, to),
      "resolve": Function resolve(...args),
      "sep": "/",
      "toNamespacedPath": Function toNamespacedPath(path),
      "win32": &ref_2 Object {
        "_makeLong": Function toNamespacedPath(path),
        "basename": Function basename(path, ext),
        "delimiter": ";",
        "dirname": Function dirname(path),
        "extname": Function extname(path),
        "format": Function bound _format(),
        "isAbsolute": Function isAbsolute(path),
        "join": Function join(...args),
        "normalize": Function normalize(path),
        "parse": Function parse(path),
        "posix": <*ref_1>,
        "relative": Function relative(from, to),
        "resolve": Function resolve(...args),
        "sep": "\\\\",
        "toNamespacedPath": Function toNamespacedPath(path),
        "win32": <*ref_2>,
      },
    },
    "umask": Function Umask(classUmask),
    "unicode": Function Boolean(),
    "update-notifier": Function Boolean(),
    "usage": Function Boolean(),
    "user-agent": Function String(),
    "userconfig": &ref_1 Object {
      "_makeLong": Function toNamespacedPath(path),
      "basename": Function basename(path, ext),
      "delimiter": ":",
      "dirname": Function dirname(path),
      "extname": Function extname(path),
      "format": Function bound _format(),
      "isAbsolute": Function isAbsolute(path),
      "join": Function join(...args),
      "normalize": Function normalize(path),
      "parse": Function parse(path),
      "posix": <*ref_1>,
      "relative": Function relative(from, to),
      "resolve": Function resolve(...args),
      "sep": "/",
      "toNamespacedPath": Function toNamespacedPath(path),
      "win32": &ref_2 Object {
        "_makeLong": Function toNamespacedPath(path),
        "basename": Function basename(path, ext),
        "delimiter": ";",
        "dirname": Function dirname(path),
        "extname": Function extname(path),
        "format": Function bound _format(),
        "isAbsolute": Function isAbsolute(path),
        "join": Function join(...args),
        "normalize": Function normalize(path),
        "parse": Function parse(path),
        "posix": <*ref_1>,
        "relative": Function relative(from, to),
        "resolve": Function resolve(...args),
        "sep": "\\\\",
        "toNamespacedPath": Function toNamespacedPath(path),
        "win32": <*ref_2>,
      },
    },
    "version": Function Boolean(),
    "versions": Function Boolean(),
    "viewer": Function String(),
  },
}
`
